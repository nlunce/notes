---
title: 'The Fast Fourier Transform (FFT)'
author: 'Nathan Lunceford'
format:
  html:
    self-contained: true
    page-layout: full
    toc: true
    toc-depth: 3
    toc-location: right
    number-sections: false
    html-math-method: katex
    embed-resources: true
    code-fold: true
    code-summary: 'Show Code'
    code-overflow: wrap
    code-copy: hover
    code-tools:
      source: false
      toggle: true
      caption: See code
engine: jupyter
preview:
  port: 3000
  browser: true
  watch-inputs: true
  navigate: true
---

## **Overview**

The **Fast Fourier Transform (FFT)** is an efficient algorithm to compute the **Discrete Fourier Transform (DFT)**. By recursively breaking the DFT into smaller DFTs, the FFT reduces the computational complexity from $O(n^2)$ to $O(n \log n)$, making it essential for signal processing, image analysis, and many other fields.

## **The Discrete Fourier Transform (DFT)**

The DFT transforms a sequence of $n$ samples $x_j$ in the time domain into its frequency components $y_k$:

$$
y_k = \frac{1}{\sqrt{n}} \sum_{j=0}^{n-1} x_j \omega^{jk}, \quad \omega = e^{-i \frac{2\pi}{n}}, \quad k = 0, 1, \dots, n-1
$$

Here:

- $x_j$: The input samples in the time domain.
- $y_k$: The output frequency components.
- $\omega = e^{-i \frac{2\pi}{n}}$: The primitive $n$-th root of unity.

The **Inverse DFT (IDFT)** reconstructs the time-domain signal from its frequency components:

$$
x_j = \frac{1}{\sqrt{n}} \sum_{k=0}^{n-1} y_k \omega^{-jk}, \quad j = 0, 1, \dots, n-1
$$

The FFT optimizes the computation of the DFT by exploiting symmetries in the roots of unity $e^{-2\pi i / n}$.

## **FFT Algorithm**

### **Expand the DFT**

Consider the DFT for $n = 4$. The transformation can be written as a matrix-vector product:

$$
\begin{bmatrix}
z_0 \\
z_1 \\
z_2 \\
z_3
\end{bmatrix}
=
\begin{bmatrix}
\omega^{0 \cdot 0} & \omega^{0 \cdot 1} & \omega^{0 \cdot 2} & \omega^{0 \cdot 3} \\
\omega^{1 \cdot 0} & \omega^{1 \cdot 1} & \omega^{1 \cdot 2} & \omega^{1 \cdot 3} \\
\omega^{2 \cdot 0} & \omega^{2 \cdot 1} & \omega^{2 \cdot 2} & \omega^{2 \cdot 3} \\
\omega^{3 \cdot 0} & \omega^{3 \cdot 1} & \omega^{3 \cdot 2} & \omega^{3 \cdot 3}
\end{bmatrix}
\begin{bmatrix}
x_0 \\
x_1 \\
x_2 \\
x_3
\end{bmatrix}
$$

where $\omega = e^{-i \frac{2\pi}{4}} = e^{-i \frac{\pi}{2}}$.

Compute $\omega^k$ for $k = 0, 1, 2, 3$:

- $\omega^0 = e^{-i 0} = 1$
- $\omega^1 = e^{-i \frac{\pi}{2}} = -i$
- $\omega^2 = e^{-i \pi} = -1$
- $\omega^3 = e^{-i \frac{3\pi}{2}} = i$

Expanding the terms gives:

1. **For $z_0$ ( $k = 0$ ):**

   $$
   \begin{align*}
   z_0 &= x_0 \omega^{0 \cdot 0} + x_1 \omega^{0 \cdot 1} + x_2 \omega^{0 \cdot 2} + x_3 \omega^{0 \cdot 3} \\
       &= x_0 (1) + x_1 (1) + x_2 (1) + x_3 (1) \\
       &= x_0 + x_1 + x_2 + x_3
   \end{align*}
   $$

2. **For $z_1$ ( $k = 1$ ):**

   $$
   \begin{align*}
   z_1 &= x_0 \omega^{0 \cdot 1} + x_1 \omega^{1 \cdot 1} + x_2 \omega^{2 \cdot 1} + x_3 \omega^{3 \cdot 1} \\
       &= x_0 (1) + x_1 (-i) + x_2 (-1) + x_3 (i)
   \end{align*}
   $$

3. **For $z_2$ ( $k = 2$ ):**

   $$
   \begin{align*}
   z_2 &= x_0 \omega^{0 \cdot 2} + x_1 \omega^{1 \cdot 2} + x_2 \omega^{2 \cdot 2} + x_3 \omega^{3 \cdot 2} \\
       &= x_0 (1) + x_1 (-1) + x_2 (1) + x_3 (-1)
   \end{align*}
   $$

4. **For $z_3$ ( $k = 3$ ):**

   $$
   \begin{align*}
   z_3 &= x_0 \omega^{0 \cdot 3} + x_1 \omega^{1 \cdot 3} + x_2 \omega^{2 \cdot 3} + x_3 \omega^{3 \cdot 3} \\
       &= x_0 (1) + x_1 (i) + x_2 (-1) + x_3 (-i)
   \end{align*}
   $$

### **Separate Even and Odd Terms**

Group the terms into **even-indexed** ($x_0, x_2$) and **odd-indexed** ($x_1, x_3$) contributions:

1. **For $z_0$:**

   $$
   z_0 = (x_0 + x_2) + (x_1 + x_3)
   $$

2. **For $z_1$:**

   $$
   z_1 = \left( x_0 + x_2 (-1) \right) + \left( x_1 (-i) + x_3 (i) \right)
   $$

3. **For $z_2$:**

   $$
   z_2 = (x_0 + x_2) + (x_1 (-1) + x_3 (-1))
   $$

4. **For $z_3$:**

   $$
   z_3 = \left( x_0 + x_2 (-1) \right) + \left( x_1 (i) + x_3 (-i) \right)
   $$

### **Factor Out Common Terms**

For the **odd terms**, notice that:

- In $z_1$ and $z_3$, the odd-indexed terms involve $\omega^k$ multiplied by $x_1$ and $x_3$.
- We can factor out $\omega^k$ from these terms.

Let's define:

- $u_k = x_0 + x_2 (-1)^k$
- $v_k = x_1 + x_3 (-1)^k$

**Compute $(-1)^k$:**

- $(-1)^0 = 1$
- $(-1)^1 = -1$
- $(-1)^2 = 1$
- $(-1)^3 = -1$

**Compute $u_k$:**

- $u_0 = x_0 + x_2 (1) = x_0 + x_2$
- $u_1 = x_0 + x_2 (-1) = x_0 - x_2$
- $u_2 = x_0 + x_2 (1) = x_0 + x_2$
- $u_3 = x_0 + x_2 (-1) = x_0 - x_2$

**Compute $v_k$:**

- $v_0 = x_1 + x_3 (1) = x_1 + x_3$
- $v_1 = x_1 + x_3 (-1) = x_1 - x_3$
- $v_2 = x_1 + x_3 (1) = x_1 + x_3$
- $v_3 = x_1 + x_3 (-1) = x_1 - x_3$

Now, the DFT outputs can be expressed as:

- **For $k = 0$:**

  $$
  z_0 = u_0 + v_0
  $$

- **For $k = 1$:**

  $$
  z_1 = u_1 + \omega^{k} v_1 = u_1 + (-i) v_1
  $$

- **For $k = 2$:**

  $$
  z_2 = u_2 - v_2 = u_2 - v_2
  $$

- **For $k = 3$:**

  $$
  z_3 = u_3 + \omega^{k} v_3 = u_3 + i v_3
  $$

### **Recognize Smaller DFTs**

We can now see that we've broken down the original DFT into smaller DFTs of size 2:

#### **Even-Indexed DFT ($U_k$)**

Compute $U_k$ using the even-indexed elements $x_0$ and $x_2$:

$$
\begin{bmatrix}
u_0 \\
u_1
\end{bmatrix}
=
\begin{bmatrix}
x_0 + x_2 \\
x_0 - x_2
\end{bmatrix}
$$

#### **Odd-Indexed DFT ($V_k$)**

Compute $V_k$ using the odd-indexed elements $x_1$ and $x_3$:

$$
\begin{bmatrix}
v_0 \\
v_1
\end{bmatrix}
=
\begin{bmatrix}
x_1 + x_3 \\
x_1 - x_3
\end{bmatrix}
$$

### **Combine the Results with Twiddle Factors**

Now, combine $U_k$ and $V_k$ using the twiddle factors $\omega^{k}$:

1. **For $k = 0$:**

   $$
   \begin{align*}
   z_0 &= u_0 + \omega^{0} v_0 = u_0 + v_0 \\
   z_2 &= u_0 - \omega^{0} v_0 = u_0 - v_0
   \end{align*}
   $$

   Since $\omega^{0} = 1$.

2. **For $k = 1$:**

   $$
   \begin{align*}
   z_1 &= u_1 + \omega^{1} v_1 = u_1 + (-i) v_1 \\
   z_3 &= u_1 - \omega^{1} v_1 = u_1 - (-i) v_1 = u_1 + i v_1
   \end{align*}
   $$

   Since $\omega^{1} = -i$.

### **Summary of Steps**

1. **Compute $u_0$ and $u_1$:**

   - $u_0 = x_0 + x_2$
   - $u_1 = x_0 - x_2$

2. **Compute $v_0$ and $v_1$:**

   - $v_0 = x_1 + x_3$
   - $v_1 = x_1 - x_3$

3. **Compute $z_k$:**

   - $z_0 = u_0 + v_0$
   - $z_1 = u_1 + (-i) v_1$
   - $z_2 = u_0 - v_0$
   - $z_3 = u_1 + i v_1$

### **Final FFT Algorithm for $n = 4$**

By following these steps, we've efficiently computed the DFT using the FFT algorithm:

- **Step 1:** Divide the input sequence into even and odd indices.
- **Step 2:** Compute the smaller DFTs ($U_k$ and $V_k$) of size 2.
- **Step 3:** Combine the results using the twiddle factors $\omega^{k}$.

## **FFT Flow Diagram**

The following diagram illustrates how the FFT splits a DFT into smaller sub-DFTs and combines the results:

<img src="./fft-flow.png" alt="FFT Diagram" width="500px">

### **Explanation of the Diagram**

1. **Input Splitting**:

   - The input sequence $x[n]$ of length $N$ is split into two sequences:
     - The **even-indexed terms**: $x[0], x[2], \dots, x[N-2]$.
     - The **odd-indexed terms**: $x[1], x[3], \dots, x[N-1]$.

2. **Recursive Computation**:

   - Each sequence is passed through an $N/2$-point DFT.
   - The top box computes the DFT of the even terms, yielding $E[k]$.
   - The bottom box computes the DFT of the odd terms, yielding $O[k]$.

3. **Combining the Results**:

   - The outputs of the two $N/2$-point DFTs are combined using the twiddle factors $W_N^k$ to compute the final $N$-point DFT:
     - $X[k] = E[k] + W_N^k O[k]$, for $k = 0, 1, \dots, N/2-1$.
     - $X[k + N/2] = E[k] - W_N^k O[k]$, for $k = 0, 1, \dots, N/2-1$.

4. **Butterfly Connections**:
   - The crossing lines (labeled with $W_N^k$) represent the **butterfly structure**, which combines the even and odd terms.

This recursive breakdown is what enables the FFT to compute the DFT efficiently.
