{"title":"Reality Check 1","markdown":{"yaml":{"title":"Reality Check 1","subtitle":"MATH411","author":"Nathan Lunceford","format":{"pdf":{"self-contained":true,"page-layout":"full","title-block-banner":true,"number-sections":false,"html-math-method":"katex","code-fold":true,"code-summary":"Show the code","code-overflow":"wrap","code-copy":"hover","code-tools":{"source":false,"toggle":true,"caption":"See code"}}}},"headingText":"Reality Check 1","containsRefs":false,"markdown":"\n\n{{< pagebreak >}}\n\n\n### Stewart Platform Overview\n\nThe Stewart platform is a mechanical system consisting of six adjustable prismatic joints (struts) that provide six degrees of freedom (three translations and three rotations). It is widely used in applications like robotics, flight simulators, and precision machining, where precise control over the platform’s position and orientation is critical. Accurately solving for the platform's position and orientation is vital in these fields to ensure precision and functionality.\n\nIn this project, we simplify the platform to a two-dimensional model. This 2D Stewart platform consists of a triangular platform connected to fixed anchor points by three adjustable struts. The objective is to solve the **forward kinematics problem**, where we determine the position $(x, y)$ and orientation $\\theta$ of the platform, given the lengths of the three struts ($p_1$, $p_2$, $p_3$). These poses or configurations represent valid states of the platform in space.\n\nUnlike the **inverse kinematics problem**, which calculates the strut lengths given a specific platform position, the forward kinematics problem has no closed-form solution due to the complexity of the geometry involved. As a result, we reduce the problem to a single nonlinear equation in $\\theta$, denoted as $f(\\theta)$. Solving this equation numerically reveals the valid poses (configurations) of the platform, which is essential for its application in robotics and simulations.\n\n### Inverse Kinematics Equations\n\nTo derive the forward kinematics equations, we start by considering the inverse kinematics of the planar Stewart platform. The system consists of three struts connecting fixed anchor points to the vertices of the triangular platform. The relationship between the platform's configuration and the strut lengths is described by the following equations:\n\n$$\np_1^2 = x^2 + y^2\n$$\n\n$$\np_2^2 = (x + A_2)^2 + (y + B_2)^2\n$$\n\n$$\np_3^2 = (x + A_3)^2 + (y + B_3)^2\n$$\n\nHere, $p_1$, $p_2$, and $p_3$ are the lengths of the struts, and the constants $A_2$, $B_2$, $A_3$, and $B_3$ are related to the platform's orientation and the fixed anchor points.\n\n### Breakdown of Constants\n\nThe constants $A_2$, $B_2$, $A_3$, and $B_3$ are derived from the platform’s geometry and orientation:\n\n- $A_2 = L_3 \\cos(\\theta) - x_1$\n- $B_2 = L_3 \\sin(\\theta)$\n- $A_3 = L_2 \\cos(\\theta + \\gamma) - x_2$\n- $B_3 = L_2 \\sin(\\theta + \\gamma) - y_2$\n\nWhere:\n\n- $L_1$, $L_2$, and $L_3$ are the lengths of the sides of the triangular platform.\n- $\\gamma$ is the angle opposite side $L_1$.\n- $(x_1, 0)$ and $(x_2, y_2)$ are the positions of the anchor points.\n\nThese constants are necessary for expressing the inverse kinematics problem, which solves for the strut lengths ($p_1$, $p_2$, $p_3$) given the platform's position $(x, y, \\theta)$. In the forward kinematics problem, we aim to determine $(x, y, \\theta)$ from the known strut lengths.\n\n### From Inverse to Forward Kinematics\n\nTo solve the forward kinematics problem, we eliminate the unknowns $x$ and $y$ from the inverse kinematics equations. This involves expanding and rearranging the equations to express $x$ and $y$ in terms of the constants and $\\theta$. The final equation for $\\theta$ is derived as:\n\n$$\nx = \\frac{N_1}{D} = \\frac{B_3(p_2^2 - p_1^2 - A_2^2 - B_2^2) - B_2(p_3^2 - p_1^2 - A_3^2 - B_3^2)}{2(A_2B_3 - B_2A_3)}\n$$\n\n$$\ny = \\frac{N_2}{D} = \\frac{-A_3(p_2^2 - p_1^2 - A_2^2 - B_2^2) + A_2(p_3^2 - p_1^2 - A_3^2 - B_3^2)}{2(A_2B_3 - B_2A_3)}\n$$\n\nThese expressions for $x$ and $y$ hold as long as the denominator $D = 2(A_2B_3 - B_2A_3)$ is nonzero. Substituting these values into the first inverse kinematics equation yields the final equation for $\\theta$:\n\n$$\nf(\\theta) = N_1^2 + N_2^2 - p_1^2 D^2 = 0\n$$\n\nHere, $N_1$ and $N_2$ are intermediate expressions based on the system of equations. Solving this equation gives the valid values of $\\theta$ corresponding to the platform's possible poses.\n\n---\n\n{{< pagebreak >}}\n\n# Problem 1\n\n**Objective:** Write a python function for f($\\theta$). The parameters $L_1, L_2, L_3, \\gamma, x_1, x_2, y_2$ are fixed constants, and the strut lengths $p_1, p_2, p_3$ will be known for a given pose. To test your code, set the parameters $L_1 = 2$, $L_2 = L_3 = \\sqrt{2}$, $\\gamma = \\pi/2$, and $p_1 = p_2 = p_3 = \\sqrt{5}$. Then, substituting $\\theta = -\\pi/4$ or $\\theta = \\pi/4$, should make $f(\\theta) = 0$.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n   - The function $f(\\theta)$ relates the orientation angle $\\theta$ and the strut lengths of the platform. It is derived using trigonometric relationships between the platform's geometry and anchor points.\n   - The goal is to simplify these relationships into a single equation for $f(\\theta)$, which can be solved to find valid platform poses.\n\n2. **Implementation in Code**:\n   - I implemented the function $f(\\theta)$ to calculate the value based on given constants and strut lengths. I tested the function using specific values for $\\theta$, verifying that the results were consistent with expected configurations where $f(\\theta) = 0$.\n   - The test confirmed that the function correctly represents the forward kinematics of the Stewart platform, with results near zero indicating valid solutions.\n\n### Results:\n\nFor the test values of $\\theta = \\pm \\frac{\\pi}{4}$, the function returned:\n\n$$\nf\\left(\\pm \\frac{\\pi}{4}\\right) = -4.547473508864641 \\times 10^{-13}\n$$\n\n\n\nThis value is effectively zero, within the limits of numerical precision. This confirms that the function $f(\\theta)$ works correctly and that $\\theta = \\pm \\frac{\\pi}{4}$ are valid solutions for the given platform configuration.\n\n---\n\n{{< pagebreak >}}\n\n# Problem 2\n\n**Objective:** Plot $f(\\theta)$ over the interval $[-\\pi, \\pi]$.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n   - Visualizing the function $f(\\theta)$ is essential to understanding the behavior of the Stewart platform. The roots of this function correspond to valid configurations (poses) of the platform, where $f(\\theta) = 0$. Identifying these roots graphically helps to confirm the expected solutions and provides insight into how the platform behaves across different angles $\\theta$.\n\n2. **Implementation in Code**:\n   - I first generated a range of $\\theta$ values between $-\\pi$ and $\\pi$ using `np.linspace()` to create 400 evenly spaced points. These points provide a sufficiently detailed view of the function’s behavior without causing excessive computational overhead.\n   - For each value of $\\theta$, I computed $f(\\theta)$ by passing it through the previously defined function. This gave me an array of function values corresponding to the array of $\\theta$ values.\n   - I then plotted the function using `matplotlib`, where the x-axis represents $\\theta$ and the y-axis represents the value of $f(\\theta)$. I also included horizontal and vertical reference lines to highlight where $f(\\theta) = 0$ and the specific points where $\\theta = \\pm \\pi/4$, as identified in **Problem 1**.\n   - The resulting plot clearly shows the roots of the function, which align with the values found in the previous problem. These roots represent the valid poses of the platform, where the lengths of the struts and the angle $\\theta$ satisfy the system of equations.\n\n### Results:\n\n![](./p2_function_plot.png)\n\n---\n\n{{< pagebreak >}}\n\n# Problem 3\n\n**Objective:** Reproduce a figure of the platform with a triangle representing the platform and small circles for the anchor points.\n\n\n\n1. **Implementation in Code**:\n   - I developed a helper function `get_x_y()` to calculate the $x$ and $y$ coordinates of one vertex of the platform based on the angle $\\theta$ and the provided constants. This function applies the trigonometric relationships derived from the platform's geometry. \n   - After determining the position of this key vertex, I used another helper function, `get_points()`, to compute the remaining two vertices of the triangular platform. This function takes the initial vertex, the angle $\\theta$, and the constants (such as the strut lengths) to determine the other two points of the triangle.\n   - The `get_anchor_points()` function returns the fixed positions of the anchor points, which define the platform’s fixed geometry and are essential for calculating the platform's overall configuration.\n   - To visualize the platform, I implemented the `plot_triangle()` function, which plots the triangle’s vertices and anchor points. Blue lines connect the anchor points to the vertices, while red lines highlight the edges of the triangle.\n   - Using these functions, I generated two plots: one for $\\theta = \\pi/4$ and another for $\\theta = -\\pi/4$, showing the two distinct configurations of the Stewart platform. \n\n### Results:\n\n![](./p3_function_plot.png)\n\n---\n\n{{< pagebreak >}}\n\n# Problem 4\n\n**Objective:** Solve the forward kinematics problem for the planar Stewart platform specified by $x_1 = 5$, $(x_2, y_2) = (0,6)$, $L_1 = L_3 = 3$, $L_2 = 3\\sqrt{2}$, $\\gamma = \\pi / 4$, $p_1 = p_2 = 5$, $p_3 = 3$.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n   - The goal was to find the roots of $f(\\theta)$ to determine the platform’s valid poses based on the given parameters. Each root of the equation corresponds to a distinct configuration (pose) of the Stewart platform. \n   - I calculated the platform's position $(x, y)$ and orientation $\\theta$ for each root, which represents a valid solution for the platform's configuration.\n\n![](./p4_function_plot.png)\n\n2. **Implementation in Code**:\n   - I solved the function $f(\\theta)$ numerically using `fsolve()` and an array of initial guesses to ensure that all valid roots were captured. The `find_roots()` function I created handled this process by iterating over each guess to find the unique solutions where $f(\\theta) = 0$. This method successfully identified four distinct roots, corresponding to valid poses of the platform.\n   \n   - To ensure the correctness of the computed configurations, I implemented a validation step. I verified that the calculated lengths of the struts $p_1$, $p_2$, and $p_3$ matched the expected values provided in the problem. This was done by calculating the Euclidean distances between the platform’s vertices and their respective anchor points, corresponding to the strut lengths.\n\n### Results:\n\n![](./p4b_function_plot.png)\n\nAs shown in the plot above, I found four distinct roots corresponding to four valid poses of the Stewart platform. For each root, I plotted the platform's triangular configuration, confirming the geometry and strut lengths. \n\nHere are the identified roots and the corresponding strut lengths:\n\n- Root 1: $\\theta = -0.72084920$, strut lengths = [5, 5, 3]\n- Root 2: $\\theta = -0.33100518$, strut lengths = [5, 5, 3]\n- Root 3: $\\theta = 1.14368551$, strut lengths = [5, 5, 3]\n- Root 4: $\\theta = 2.11590901$, strut lengths = [5, 5, 3]\n\n---\n\n{{< pagebreak >}}\n\n# Problem 5\n\n**Objective:** Modify the strut length $p_2 = 7$ and re-solve the problem to find six distinct poses.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n   - By changing the strut length $p_2 = 7$, the function $f(\\theta)$ and the number of possible poses of the platform are altered. Modifying this parameter can introduce additional roots, corresponding to new configurations of the Stewart platform.\n   - The goal here was to find the six possible poses by solving $f(\\theta)$ for the modified system. Each root of the function $f(\\theta) = 0$ corresponds to a valid configuration of the platform.\n\n   ![](./p5_function_plot.png)\n\n2. **Implementation in Code**:\n   - After modifying the constants to reflect $p_2 = 7$, I updated the function $f(\\theta)$ and plotted it over the interval $[-\\pi, \\pi]$ to visualize its behavior.\n   - Using an updated set of initial guesses for the `find_roots()` function, I identified six distinct roots. These roots represent six unique poses of the Stewart platform for the modified strut length.\n   - For each root, I calculated and verified the corresponding configurations by plotting the triangle configurations of the platform and confirming that the strut lengths $p_1, p_2, p_3$ matched the expected values.\n\n### Results:\n\n\n![](./p5b_function_plot.png)\n\n\nAs shown, I found the following six roots of $f(\\theta)$, corresponding to six distinct poses of the Stewart platform:\n\n- Root 1: $\\theta = -0.67315749$, strut lengths = [5, 7, 3]\n- Root 2: $\\theta = -0.35474027$, strut lengths = [5, 7, 3]\n- Root 3: $\\theta = 0.03776676$, strut lengths = [5, 7, 3]\n- Root 4: $\\theta = 0.45887818$, strut lengths = [5, 7, 3]\n- Root 5: $\\theta = 0.97767289$, strut lengths = [5, 7, 3]\n- Root 6: $\\theta = 2.51385280$, strut lengths = [5, 7, 3]\n\n---\n\n{{< pagebreak >}}\n\n# Problem 6\n\n**Objective:** Find a strut length $p_2$ such that the platform has exactly two poses.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n\n   - To identify the value of $p_2$ that results in exactly two poses, I iteratively adjusted $p_2$ and solved the corresponding $f(\\theta) = 0$. The goal was to determine when the number of valid solutions (poses) reduced to exactly two, indicating a unique configuration of the platform with only two possible positions.\n\n2. **Implementation in Code**:\n\n   - I used the `fsolve()` method with predefined initial guesses to identify the roots of $f(\\theta)$. This method relies on initial guesses for the root-finding process. While fsolve can be effective, its success depends on the accuracy of these guesses. Therefore, I systematically tested different values of $p_2$ to check whether exactly two valid roots could be found.\n   - After verifying the results through both numerical methods and graphical plotting, I confirmed that $p_2 = 4.000$ produced exactly two distinct roots.\n\n### Results:\n\n![](./p6_function_plot.png)\n\nAs seen in the plots, for $p_2 = 4.000$, two valid roots were found at $\\theta = 1.331642$ and $\\theta = 1.777514$. The plot clearly shows the corresponding behavior of $f(\\theta)$ for various values of $p_2$. Prior to $p_2 = 4.000$, there were no valid poses, and as $p_2$ increased, the two roots emerged, confirming that this was the correct value for the two-pose configuration.\n\n---\n\n{{< pagebreak >}}\n\n# Problem 7\n\n**Objective:** Calculate the intervals in $p_2$ where the platform has 0, 2, 4, or 6 poses.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n\n   - The number of valid poses changes as $p_2$ varies, and the goal was to determine the intervals of $p_2$ where the platform has different numbers of valid poses (roots).\n   - By solving $f(\\theta)$ for a range of $p_2$ values, I classified the intervals based on the number of valid solutions. Each solution corresponds to a possible configuration (pose) of the platform.\n\n2. **Refinement of the Numerical Method**:\n\n   - In transitioning from **Problem 6** to **Problem 7**, I realized that using `fsolve` with predefined initial guesses became unreliable. It often missed roots or identified duplicate roots due to its sensitivity to the starting points provided. This was problematic for accurately counting the number of valid poses, especially as the value of $p_2$ changed.\n   - To overcome this, I adopted a more robust approach using the **Brent's method** (`brentq`). This method detects sign changes in $f(\\theta)$ and efficiently locates roots where the function transitions from positive to negative or vice versa. This strategy improved root detection by ensuring that I captured all the valid roots without introducing duplicates or missing any solutions.\n   - The precision of this method allowed me to accurately count the number of poses for each $p_2$ value, giving a much clearer picture of how the platform's configurations evolve as the strut length changes.\n\n3. **Implementation in Code**:\n\n   - I implemented a loop that systematically adjusted $p_2$ in small increments and employed `brentq` to find the corresponding roots of $f(\\theta)$. For each value of $p_2$, the number of valid roots was counted, and the results were classified into intervals where the platform had 0, 2, 4, or 6 poses.\n   - This method provided a reliable classification of the intervals and improved the accuracy of the results, which were then plotted for visual clarity.\n\n### Results:\n\n![](./p7_function_plot.png)\n\nBased on the computations, the following intervals for $p_2$ and the corresponding number of poses were identified:\n\n- **Intervals with 0 poses:**\n  - $p_2$ from 0.00 to 3.71\n  - $p_2$ from 9.27 to infinity\n\n- **Intervals with 2 poses:**\n  - $p_2$ from 3.72 to 4.86\n  - $p_2$ from 7.85 to 9.26\n\n- **Intervals with 4 poses:**\n  - $p_2$ from 4.87 to 6.96\n  - $p_2$ from 7.03 to 7.84\n\n- **Intervals with 6 poses:**\n  - $p_2$ from 6.97 to 7.02\n\n---","srcMarkdownNoYaml":"\n\n{{< pagebreak >}}\n\n# Reality Check 1\n\n### Stewart Platform Overview\n\nThe Stewart platform is a mechanical system consisting of six adjustable prismatic joints (struts) that provide six degrees of freedom (three translations and three rotations). It is widely used in applications like robotics, flight simulators, and precision machining, where precise control over the platform’s position and orientation is critical. Accurately solving for the platform's position and orientation is vital in these fields to ensure precision and functionality.\n\nIn this project, we simplify the platform to a two-dimensional model. This 2D Stewart platform consists of a triangular platform connected to fixed anchor points by three adjustable struts. The objective is to solve the **forward kinematics problem**, where we determine the position $(x, y)$ and orientation $\\theta$ of the platform, given the lengths of the three struts ($p_1$, $p_2$, $p_3$). These poses or configurations represent valid states of the platform in space.\n\nUnlike the **inverse kinematics problem**, which calculates the strut lengths given a specific platform position, the forward kinematics problem has no closed-form solution due to the complexity of the geometry involved. As a result, we reduce the problem to a single nonlinear equation in $\\theta$, denoted as $f(\\theta)$. Solving this equation numerically reveals the valid poses (configurations) of the platform, which is essential for its application in robotics and simulations.\n\n### Inverse Kinematics Equations\n\nTo derive the forward kinematics equations, we start by considering the inverse kinematics of the planar Stewart platform. The system consists of three struts connecting fixed anchor points to the vertices of the triangular platform. The relationship between the platform's configuration and the strut lengths is described by the following equations:\n\n$$\np_1^2 = x^2 + y^2\n$$\n\n$$\np_2^2 = (x + A_2)^2 + (y + B_2)^2\n$$\n\n$$\np_3^2 = (x + A_3)^2 + (y + B_3)^2\n$$\n\nHere, $p_1$, $p_2$, and $p_3$ are the lengths of the struts, and the constants $A_2$, $B_2$, $A_3$, and $B_3$ are related to the platform's orientation and the fixed anchor points.\n\n### Breakdown of Constants\n\nThe constants $A_2$, $B_2$, $A_3$, and $B_3$ are derived from the platform’s geometry and orientation:\n\n- $A_2 = L_3 \\cos(\\theta) - x_1$\n- $B_2 = L_3 \\sin(\\theta)$\n- $A_3 = L_2 \\cos(\\theta + \\gamma) - x_2$\n- $B_3 = L_2 \\sin(\\theta + \\gamma) - y_2$\n\nWhere:\n\n- $L_1$, $L_2$, and $L_3$ are the lengths of the sides of the triangular platform.\n- $\\gamma$ is the angle opposite side $L_1$.\n- $(x_1, 0)$ and $(x_2, y_2)$ are the positions of the anchor points.\n\nThese constants are necessary for expressing the inverse kinematics problem, which solves for the strut lengths ($p_1$, $p_2$, $p_3$) given the platform's position $(x, y, \\theta)$. In the forward kinematics problem, we aim to determine $(x, y, \\theta)$ from the known strut lengths.\n\n### From Inverse to Forward Kinematics\n\nTo solve the forward kinematics problem, we eliminate the unknowns $x$ and $y$ from the inverse kinematics equations. This involves expanding and rearranging the equations to express $x$ and $y$ in terms of the constants and $\\theta$. The final equation for $\\theta$ is derived as:\n\n$$\nx = \\frac{N_1}{D} = \\frac{B_3(p_2^2 - p_1^2 - A_2^2 - B_2^2) - B_2(p_3^2 - p_1^2 - A_3^2 - B_3^2)}{2(A_2B_3 - B_2A_3)}\n$$\n\n$$\ny = \\frac{N_2}{D} = \\frac{-A_3(p_2^2 - p_1^2 - A_2^2 - B_2^2) + A_2(p_3^2 - p_1^2 - A_3^2 - B_3^2)}{2(A_2B_3 - B_2A_3)}\n$$\n\nThese expressions for $x$ and $y$ hold as long as the denominator $D = 2(A_2B_3 - B_2A_3)$ is nonzero. Substituting these values into the first inverse kinematics equation yields the final equation for $\\theta$:\n\n$$\nf(\\theta) = N_1^2 + N_2^2 - p_1^2 D^2 = 0\n$$\n\nHere, $N_1$ and $N_2$ are intermediate expressions based on the system of equations. Solving this equation gives the valid values of $\\theta$ corresponding to the platform's possible poses.\n\n---\n\n{{< pagebreak >}}\n\n# Problem 1\n\n**Objective:** Write a python function for f($\\theta$). The parameters $L_1, L_2, L_3, \\gamma, x_1, x_2, y_2$ are fixed constants, and the strut lengths $p_1, p_2, p_3$ will be known for a given pose. To test your code, set the parameters $L_1 = 2$, $L_2 = L_3 = \\sqrt{2}$, $\\gamma = \\pi/2$, and $p_1 = p_2 = p_3 = \\sqrt{5}$. Then, substituting $\\theta = -\\pi/4$ or $\\theta = \\pi/4$, should make $f(\\theta) = 0$.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n   - The function $f(\\theta)$ relates the orientation angle $\\theta$ and the strut lengths of the platform. It is derived using trigonometric relationships between the platform's geometry and anchor points.\n   - The goal is to simplify these relationships into a single equation for $f(\\theta)$, which can be solved to find valid platform poses.\n\n2. **Implementation in Code**:\n   - I implemented the function $f(\\theta)$ to calculate the value based on given constants and strut lengths. I tested the function using specific values for $\\theta$, verifying that the results were consistent with expected configurations where $f(\\theta) = 0$.\n   - The test confirmed that the function correctly represents the forward kinematics of the Stewart platform, with results near zero indicating valid solutions.\n\n### Results:\n\nFor the test values of $\\theta = \\pm \\frac{\\pi}{4}$, the function returned:\n\n$$\nf\\left(\\pm \\frac{\\pi}{4}\\right) = -4.547473508864641 \\times 10^{-13}\n$$\n\n\n\nThis value is effectively zero, within the limits of numerical precision. This confirms that the function $f(\\theta)$ works correctly and that $\\theta = \\pm \\frac{\\pi}{4}$ are valid solutions for the given platform configuration.\n\n---\n\n{{< pagebreak >}}\n\n# Problem 2\n\n**Objective:** Plot $f(\\theta)$ over the interval $[-\\pi, \\pi]$.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n   - Visualizing the function $f(\\theta)$ is essential to understanding the behavior of the Stewart platform. The roots of this function correspond to valid configurations (poses) of the platform, where $f(\\theta) = 0$. Identifying these roots graphically helps to confirm the expected solutions and provides insight into how the platform behaves across different angles $\\theta$.\n\n2. **Implementation in Code**:\n   - I first generated a range of $\\theta$ values between $-\\pi$ and $\\pi$ using `np.linspace()` to create 400 evenly spaced points. These points provide a sufficiently detailed view of the function’s behavior without causing excessive computational overhead.\n   - For each value of $\\theta$, I computed $f(\\theta)$ by passing it through the previously defined function. This gave me an array of function values corresponding to the array of $\\theta$ values.\n   - I then plotted the function using `matplotlib`, where the x-axis represents $\\theta$ and the y-axis represents the value of $f(\\theta)$. I also included horizontal and vertical reference lines to highlight where $f(\\theta) = 0$ and the specific points where $\\theta = \\pm \\pi/4$, as identified in **Problem 1**.\n   - The resulting plot clearly shows the roots of the function, which align with the values found in the previous problem. These roots represent the valid poses of the platform, where the lengths of the struts and the angle $\\theta$ satisfy the system of equations.\n\n### Results:\n\n![](./p2_function_plot.png)\n\n---\n\n{{< pagebreak >}}\n\n# Problem 3\n\n**Objective:** Reproduce a figure of the platform with a triangle representing the platform and small circles for the anchor points.\n\n\n\n1. **Implementation in Code**:\n   - I developed a helper function `get_x_y()` to calculate the $x$ and $y$ coordinates of one vertex of the platform based on the angle $\\theta$ and the provided constants. This function applies the trigonometric relationships derived from the platform's geometry. \n   - After determining the position of this key vertex, I used another helper function, `get_points()`, to compute the remaining two vertices of the triangular platform. This function takes the initial vertex, the angle $\\theta$, and the constants (such as the strut lengths) to determine the other two points of the triangle.\n   - The `get_anchor_points()` function returns the fixed positions of the anchor points, which define the platform’s fixed geometry and are essential for calculating the platform's overall configuration.\n   - To visualize the platform, I implemented the `plot_triangle()` function, which plots the triangle’s vertices and anchor points. Blue lines connect the anchor points to the vertices, while red lines highlight the edges of the triangle.\n   - Using these functions, I generated two plots: one for $\\theta = \\pi/4$ and another for $\\theta = -\\pi/4$, showing the two distinct configurations of the Stewart platform. \n\n### Results:\n\n![](./p3_function_plot.png)\n\n---\n\n{{< pagebreak >}}\n\n# Problem 4\n\n**Objective:** Solve the forward kinematics problem for the planar Stewart platform specified by $x_1 = 5$, $(x_2, y_2) = (0,6)$, $L_1 = L_3 = 3$, $L_2 = 3\\sqrt{2}$, $\\gamma = \\pi / 4$, $p_1 = p_2 = 5$, $p_3 = 3$.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n   - The goal was to find the roots of $f(\\theta)$ to determine the platform’s valid poses based on the given parameters. Each root of the equation corresponds to a distinct configuration (pose) of the Stewart platform. \n   - I calculated the platform's position $(x, y)$ and orientation $\\theta$ for each root, which represents a valid solution for the platform's configuration.\n\n![](./p4_function_plot.png)\n\n2. **Implementation in Code**:\n   - I solved the function $f(\\theta)$ numerically using `fsolve()` and an array of initial guesses to ensure that all valid roots were captured. The `find_roots()` function I created handled this process by iterating over each guess to find the unique solutions where $f(\\theta) = 0$. This method successfully identified four distinct roots, corresponding to valid poses of the platform.\n   \n   - To ensure the correctness of the computed configurations, I implemented a validation step. I verified that the calculated lengths of the struts $p_1$, $p_2$, and $p_3$ matched the expected values provided in the problem. This was done by calculating the Euclidean distances between the platform’s vertices and their respective anchor points, corresponding to the strut lengths.\n\n### Results:\n\n![](./p4b_function_plot.png)\n\nAs shown in the plot above, I found four distinct roots corresponding to four valid poses of the Stewart platform. For each root, I plotted the platform's triangular configuration, confirming the geometry and strut lengths. \n\nHere are the identified roots and the corresponding strut lengths:\n\n- Root 1: $\\theta = -0.72084920$, strut lengths = [5, 5, 3]\n- Root 2: $\\theta = -0.33100518$, strut lengths = [5, 5, 3]\n- Root 3: $\\theta = 1.14368551$, strut lengths = [5, 5, 3]\n- Root 4: $\\theta = 2.11590901$, strut lengths = [5, 5, 3]\n\n---\n\n{{< pagebreak >}}\n\n# Problem 5\n\n**Objective:** Modify the strut length $p_2 = 7$ and re-solve the problem to find six distinct poses.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n   - By changing the strut length $p_2 = 7$, the function $f(\\theta)$ and the number of possible poses of the platform are altered. Modifying this parameter can introduce additional roots, corresponding to new configurations of the Stewart platform.\n   - The goal here was to find the six possible poses by solving $f(\\theta)$ for the modified system. Each root of the function $f(\\theta) = 0$ corresponds to a valid configuration of the platform.\n\n   ![](./p5_function_plot.png)\n\n2. **Implementation in Code**:\n   - After modifying the constants to reflect $p_2 = 7$, I updated the function $f(\\theta)$ and plotted it over the interval $[-\\pi, \\pi]$ to visualize its behavior.\n   - Using an updated set of initial guesses for the `find_roots()` function, I identified six distinct roots. These roots represent six unique poses of the Stewart platform for the modified strut length.\n   - For each root, I calculated and verified the corresponding configurations by plotting the triangle configurations of the platform and confirming that the strut lengths $p_1, p_2, p_3$ matched the expected values.\n\n### Results:\n\n\n![](./p5b_function_plot.png)\n\n\nAs shown, I found the following six roots of $f(\\theta)$, corresponding to six distinct poses of the Stewart platform:\n\n- Root 1: $\\theta = -0.67315749$, strut lengths = [5, 7, 3]\n- Root 2: $\\theta = -0.35474027$, strut lengths = [5, 7, 3]\n- Root 3: $\\theta = 0.03776676$, strut lengths = [5, 7, 3]\n- Root 4: $\\theta = 0.45887818$, strut lengths = [5, 7, 3]\n- Root 5: $\\theta = 0.97767289$, strut lengths = [5, 7, 3]\n- Root 6: $\\theta = 2.51385280$, strut lengths = [5, 7, 3]\n\n---\n\n{{< pagebreak >}}\n\n# Problem 6\n\n**Objective:** Find a strut length $p_2$ such that the platform has exactly two poses.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n\n   - To identify the value of $p_2$ that results in exactly two poses, I iteratively adjusted $p_2$ and solved the corresponding $f(\\theta) = 0$. The goal was to determine when the number of valid solutions (poses) reduced to exactly two, indicating a unique configuration of the platform with only two possible positions.\n\n2. **Implementation in Code**:\n\n   - I used the `fsolve()` method with predefined initial guesses to identify the roots of $f(\\theta)$. This method relies on initial guesses for the root-finding process. While fsolve can be effective, its success depends on the accuracy of these guesses. Therefore, I systematically tested different values of $p_2$ to check whether exactly two valid roots could be found.\n   - After verifying the results through both numerical methods and graphical plotting, I confirmed that $p_2 = 4.000$ produced exactly two distinct roots.\n\n### Results:\n\n![](./p6_function_plot.png)\n\nAs seen in the plots, for $p_2 = 4.000$, two valid roots were found at $\\theta = 1.331642$ and $\\theta = 1.777514$. The plot clearly shows the corresponding behavior of $f(\\theta)$ for various values of $p_2$. Prior to $p_2 = 4.000$, there were no valid poses, and as $p_2$ increased, the two roots emerged, confirming that this was the correct value for the two-pose configuration.\n\n---\n\n{{< pagebreak >}}\n\n# Problem 7\n\n**Objective:** Calculate the intervals in $p_2$ where the platform has 0, 2, 4, or 6 poses.\n\n### Solution Process:\n\n1. **Mathematical Approach**:\n\n   - The number of valid poses changes as $p_2$ varies, and the goal was to determine the intervals of $p_2$ where the platform has different numbers of valid poses (roots).\n   - By solving $f(\\theta)$ for a range of $p_2$ values, I classified the intervals based on the number of valid solutions. Each solution corresponds to a possible configuration (pose) of the platform.\n\n2. **Refinement of the Numerical Method**:\n\n   - In transitioning from **Problem 6** to **Problem 7**, I realized that using `fsolve` with predefined initial guesses became unreliable. It often missed roots or identified duplicate roots due to its sensitivity to the starting points provided. This was problematic for accurately counting the number of valid poses, especially as the value of $p_2$ changed.\n   - To overcome this, I adopted a more robust approach using the **Brent's method** (`brentq`). This method detects sign changes in $f(\\theta)$ and efficiently locates roots where the function transitions from positive to negative or vice versa. This strategy improved root detection by ensuring that I captured all the valid roots without introducing duplicates or missing any solutions.\n   - The precision of this method allowed me to accurately count the number of poses for each $p_2$ value, giving a much clearer picture of how the platform's configurations evolve as the strut length changes.\n\n3. **Implementation in Code**:\n\n   - I implemented a loop that systematically adjusted $p_2$ in small increments and employed `brentq` to find the corresponding roots of $f(\\theta)$. For each value of $p_2$, the number of valid roots was counted, and the results were classified into intervals where the platform had 0, 2, 4, or 6 poses.\n   - This method provided a reliable classification of the intervals and improved the accuracy of the results, which were then plotted for visual clarity.\n\n### Results:\n\n![](./p7_function_plot.png)\n\nBased on the computations, the following intervals for $p_2$ and the corresponding number of poses were identified:\n\n- **Intervals with 0 poses:**\n  - $p_2$ from 0.00 to 3.71\n  - $p_2$ from 9.27 to infinity\n\n- **Intervals with 2 poses:**\n  - $p_2$ from 3.72 to 4.86\n  - $p_2$ from 7.85 to 9.26\n\n- **Intervals with 4 poses:**\n  - $p_2$ from 4.87 to 6.96\n  - $p_2$ from 7.03 to 7.84\n\n- **Intervals with 6 poses:**\n  - $p_2$ from 6.97 to 7.02\n\n---"},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":{"source":false,"toggle":true,"caption":"See code"},"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","self-contained":true,"number-sections":false,"html-math-method":"katex","output-file":"rc01_writeup.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"title":"Reality Check 1","subtitle":"MATH411","author":"Nathan Lunceford","page-layout":"full","title-block-banner":true,"code-summary":"Show the code","code-copy":"hover"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html"]}