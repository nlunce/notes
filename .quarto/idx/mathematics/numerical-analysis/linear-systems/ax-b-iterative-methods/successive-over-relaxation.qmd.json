{"title":"The Successive Over-Relaxation (SOR) Method for Solving Linear Systems","markdown":{"yaml":{"title":"The Successive Over-Relaxation (SOR) Method for Solving Linear Systems","author":"Nathan Lunceford","format":{"html":{"self-contained":true,"page-layout":"full","toc":true,"toc-depth":3,"toc-location":"right","number-sections":false,"html-math-method":"katex","embed-resources":true,"code-fold":true,"code-summary":"Show Code","code-overflow":"wrap","code-copy":"hover","code-tools":{"source":false,"toggle":true,"caption":"See code"}}},"engine":"jupyter","preview":{"port":3000,"browser":true,"watch-inputs":true,"navigate":true}},"headingText":"**Overview**","containsRefs":false,"markdown":"\n\n\nThe **Successive Over-Relaxation (SOR) Method** is an extension of the [**Gauss-Seidel Method**](./gauss-seidel-method.html) used to solve [**systems of linear equations**](../../w06/linear-systems.html). By introducing a relaxation parameter $\\omega$, the SOR method accelerates convergence or allows fine-tuning of the iterative process.\n\nThe SOR method is particularly useful when $\\omega$ is chosen appropriately, typically $1 < \\omega < 2$ for over-relaxation.\n\n## **The SOR Method**\n\nConsider the system:\n\n$$\nA\\mathbf{x} = \\mathbf{b}\n$$\n\nwhere $A$ is decomposed into:\n\n- $D$: The diagonal components of $A$,\n- $L$: The strictly lower triangular components of $A$,\n- $U$: The strictly upper triangular components of $A$.\n\nThus:\n\n$$\nA = D + L + U\n$$\n\nThe SOR iterative formula is:\n\n$$\n \\mathbf{x}_{k+1} = (\\omega L + D)^{-1} \\left[ (1 - \\omega)D\\mathbf{x}_{k} - \\omega U\\mathbf{x}_{k} \\right] + \\omega (D + \\omega L)^{-1} \\mathbf{b}\n$$\n\nfor $k = 0, 1, 2, \\dots$, where:\n\n- $\\omega$: Relaxation parameter ($\\omega = 1$ corresponds to the Gauss-Seidel Method).\n\n## **Algorithm**\n\n1. **Initial Guess:**\n   Start with an initial vector $\\mathbf{x}_0$.\n\n2. **Iterative Formula:**\n   For each iteration $k$, compute:\n\n   $$\n   \\mathbf{x}_{k+1} = (\\omega L + D)^{-1} \\left[ (1 - \\omega)D\\mathbf{x}_{k} - \\omega U\\mathbf{x}_{k} \\right] + \\omega (D + \\omega L)^{-1} \\mathbf{b}\n   $$\n\n3. **Relaxation Parameter:**\n   Choose $\\omega$:\n\n   - $\\omega > 1$: Over-relaxation (accelerates convergence).\n   - $\\omega = 1$: Equivalent to the Gauss-Seidel Method.\n   - $\\omega < 1$: Under-relaxation (may be used to stabilize divergence).\n\n4. **Convergence Check:**\n   Stop when the norm of the residual $\\|\\mathbf{b} - A\\mathbf{x}^{(k)}\\|$ is sufficiently small.\n\n## **Example**\n\n### **System of Equations**\n\nConsider the system:\n\n$$\n4u + v + w = 7, \\quad u + 3v + w = 8, \\quad u + v + 5w = 6\n$$\n\n### **Step 1: Decompose $A$**\n\nDecompose the coefficient matrix $A$:\n\n$$\nA = \\begin{bmatrix}\n4 & 1 & 1 \\\\\n1 & 3 & 1 \\\\\n1 & 1 & 5\n\\end{bmatrix}, \\quad\nD = \\begin{bmatrix}\n4 & 0 & 0 \\\\\n0 & 3 & 0 \\\\\n0 & 0 & 5\n\\end{bmatrix}, \\quad\nL = \\begin{bmatrix}\n0 & 0 & 0 \\\\\n1 & 0 & 0 \\\\\n1 & 1 & 0\n\\end{bmatrix}, \\quad\nU = \\begin{bmatrix}\n0 & 1 & 1 \\\\\n0 & 0 & 1 \\\\\n0 & 0 & 0\n\\end{bmatrix}\n$$\n\n### **Step 2: Iterative Updates**\n\nUsing $\\omega = 1.25$ and an initial guess $\\mathbf{x}_0 = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\end{bmatrix}$, compute the iterations:\n\n1. **Iteration 1 ($k = 1$):**\n\n   Substitute values into the SOR formula:\n\n   $$\n   u^{(1)} = \\frac{1.25}{4} \\left[ 7 - 0 - 0 \\right] = 2.1875\n   $$\n\n   $$\n   v^{(1)} = \\frac{1.25}{3} \\left[ 8 - 2.1875 - 0 \\right] = 1.9792\n   $$\n\n   $$\n   w^{(1)} = \\frac{1.25}{5} \\left[ 6 - 2.1875 - 1.9792 \\right] = 0.9188\n   $$\n\n   $$\n   \\mathbf{x}^{(1)} = \\begin{bmatrix} 2.1875 \\\\ 1.9792 \\\\ 0.9188 \\end{bmatrix}\n   $$\n\n2. **Iteration 2 ($k = 2$):**\n\n   Using updated values:\n\n   $$\n   u^{(2)} = \\dots, \\quad v^{(2)} = \\dots, \\quad w^{(2)} = \\dots\n   $$\n\n   Continue substituting until convergence.\n\n## **Convergence Conditions**\n\nThe SOR method converges under similar conditions to the Gauss-Seidel Method:\n\n1. If $A$ is **strictly diagonally dominant**, or\n2. If $A$ is **symmetric positive definite**.\n\nAdditionally, convergence depends on the choice of $\\omega$, with $1 < \\omega < 2$ typically achieving the fastest results.\n\n## **Advantages**\n\n- **Adjustable Convergence Speed:** The relaxation parameter $\\omega$ allows tuning for faster convergence.\n- **Efficiency:** For well-chosen $\\omega$, fewer iterations are required compared to the Gauss-Seidel Method.\n\n## **Limitations**\n\n- Requires tuning $\\omega$ for optimal performance.\n- May not converge if $\\omega$ is poorly chosen.\n- Not inherently parallelizable like the Jacobi Method.\n\n## **Summary**\n\nThe **Successive Over-Relaxation (SOR) Method** improves upon the Gauss-Seidel Method by introducing a relaxation parameter $\\omega$, enabling faster convergence for well-conditioned systems. However, the method requires careful parameter selection and is sensitive to the properties of the system matrix $A$.\n","srcMarkdownNoYaml":"\n\n## **Overview**\n\nThe **Successive Over-Relaxation (SOR) Method** is an extension of the [**Gauss-Seidel Method**](./gauss-seidel-method.html) used to solve [**systems of linear equations**](../../w06/linear-systems.html). By introducing a relaxation parameter $\\omega$, the SOR method accelerates convergence or allows fine-tuning of the iterative process.\n\nThe SOR method is particularly useful when $\\omega$ is chosen appropriately, typically $1 < \\omega < 2$ for over-relaxation.\n\n## **The SOR Method**\n\nConsider the system:\n\n$$\nA\\mathbf{x} = \\mathbf{b}\n$$\n\nwhere $A$ is decomposed into:\n\n- $D$: The diagonal components of $A$,\n- $L$: The strictly lower triangular components of $A$,\n- $U$: The strictly upper triangular components of $A$.\n\nThus:\n\n$$\nA = D + L + U\n$$\n\nThe SOR iterative formula is:\n\n$$\n \\mathbf{x}_{k+1} = (\\omega L + D)^{-1} \\left[ (1 - \\omega)D\\mathbf{x}_{k} - \\omega U\\mathbf{x}_{k} \\right] + \\omega (D + \\omega L)^{-1} \\mathbf{b}\n$$\n\nfor $k = 0, 1, 2, \\dots$, where:\n\n- $\\omega$: Relaxation parameter ($\\omega = 1$ corresponds to the Gauss-Seidel Method).\n\n## **Algorithm**\n\n1. **Initial Guess:**\n   Start with an initial vector $\\mathbf{x}_0$.\n\n2. **Iterative Formula:**\n   For each iteration $k$, compute:\n\n   $$\n   \\mathbf{x}_{k+1} = (\\omega L + D)^{-1} \\left[ (1 - \\omega)D\\mathbf{x}_{k} - \\omega U\\mathbf{x}_{k} \\right] + \\omega (D + \\omega L)^{-1} \\mathbf{b}\n   $$\n\n3. **Relaxation Parameter:**\n   Choose $\\omega$:\n\n   - $\\omega > 1$: Over-relaxation (accelerates convergence).\n   - $\\omega = 1$: Equivalent to the Gauss-Seidel Method.\n   - $\\omega < 1$: Under-relaxation (may be used to stabilize divergence).\n\n4. **Convergence Check:**\n   Stop when the norm of the residual $\\|\\mathbf{b} - A\\mathbf{x}^{(k)}\\|$ is sufficiently small.\n\n## **Example**\n\n### **System of Equations**\n\nConsider the system:\n\n$$\n4u + v + w = 7, \\quad u + 3v + w = 8, \\quad u + v + 5w = 6\n$$\n\n### **Step 1: Decompose $A$**\n\nDecompose the coefficient matrix $A$:\n\n$$\nA = \\begin{bmatrix}\n4 & 1 & 1 \\\\\n1 & 3 & 1 \\\\\n1 & 1 & 5\n\\end{bmatrix}, \\quad\nD = \\begin{bmatrix}\n4 & 0 & 0 \\\\\n0 & 3 & 0 \\\\\n0 & 0 & 5\n\\end{bmatrix}, \\quad\nL = \\begin{bmatrix}\n0 & 0 & 0 \\\\\n1 & 0 & 0 \\\\\n1 & 1 & 0\n\\end{bmatrix}, \\quad\nU = \\begin{bmatrix}\n0 & 1 & 1 \\\\\n0 & 0 & 1 \\\\\n0 & 0 & 0\n\\end{bmatrix}\n$$\n\n### **Step 2: Iterative Updates**\n\nUsing $\\omega = 1.25$ and an initial guess $\\mathbf{x}_0 = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\end{bmatrix}$, compute the iterations:\n\n1. **Iteration 1 ($k = 1$):**\n\n   Substitute values into the SOR formula:\n\n   $$\n   u^{(1)} = \\frac{1.25}{4} \\left[ 7 - 0 - 0 \\right] = 2.1875\n   $$\n\n   $$\n   v^{(1)} = \\frac{1.25}{3} \\left[ 8 - 2.1875 - 0 \\right] = 1.9792\n   $$\n\n   $$\n   w^{(1)} = \\frac{1.25}{5} \\left[ 6 - 2.1875 - 1.9792 \\right] = 0.9188\n   $$\n\n   $$\n   \\mathbf{x}^{(1)} = \\begin{bmatrix} 2.1875 \\\\ 1.9792 \\\\ 0.9188 \\end{bmatrix}\n   $$\n\n2. **Iteration 2 ($k = 2$):**\n\n   Using updated values:\n\n   $$\n   u^{(2)} = \\dots, \\quad v^{(2)} = \\dots, \\quad w^{(2)} = \\dots\n   $$\n\n   Continue substituting until convergence.\n\n## **Convergence Conditions**\n\nThe SOR method converges under similar conditions to the Gauss-Seidel Method:\n\n1. If $A$ is **strictly diagonally dominant**, or\n2. If $A$ is **symmetric positive definite**.\n\nAdditionally, convergence depends on the choice of $\\omega$, with $1 < \\omega < 2$ typically achieving the fastest results.\n\n## **Advantages**\n\n- **Adjustable Convergence Speed:** The relaxation parameter $\\omega$ allows tuning for faster convergence.\n- **Efficiency:** For well-chosen $\\omega$, fewer iterations are required compared to the Gauss-Seidel Method.\n\n## **Limitations**\n\n- Requires tuning $\\omega$ for optimal performance.\n- May not converge if $\\omega$ is poorly chosen.\n- Not inherently parallelizable like the Jacobi Method.\n\n## **Summary**\n\nThe **Successive Over-Relaxation (SOR) Method** improves upon the Gauss-Seidel Method by introducing a relaxation parameter $\\omega$, enabling faster convergence for well-conditioned systems. However, the method requires careful parameter selection and is sensitive to the properties of the system matrix $A$.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":{"source":false,"toggle":true,"caption":"See code"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../../styles.css"],"toc":true,"self-contained":true,"toc-depth":3,"number-sections":false,"html-math-method":"katex","embed-resources":true,"output-file":"successive-over-relaxation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":{"light":"flatly","dark":"darkly"},"title":"The Successive Over-Relaxation (SOR) Method for Solving Linear Systems","author":"Nathan Lunceford","preview":{"port":3000,"browser":true,"watch-inputs":true,"navigate":true},"page-layout":"full","toc-location":"right","code-summary":"Show Code","code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}