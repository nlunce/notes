{"title":"Stability of the Origin in 2x2 Systems of Differential Equations","markdown":{"yaml":{"title":"Stability of the Origin in 2x2 Systems of Differential Equations","author":"Nathan Lunceford","format":{"html":{"self-contained":true,"page-layout":"full","toc":true,"toc-depth":2,"toc-location":"right","number-sections":false,"html-math-method":"katex","embed-resources":true,"code-fold":true,"code-summary":"Show the code","code-overflow":"wrap","code-copy":"hover","code-tools":{"source":false,"toggle":true,"caption":"See code"}}},"engine":"jupyter","preview":{"port":3000,"browser":true,"watch-inputs":true,"navigate":true}},"headingText":"Overview","containsRefs":false,"markdown":"\n\n```{python}\n#| label: libraries\n#| include: false\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\n```\n\n\nIn a system of differential equations defined by $\\mathbf{x}' = A \\mathbf{x}$, understanding the stability of the origin (the point $\\mathbf{x} = 0$) is essential. The stability depends on the eigenvalues of the $2 \\times 2$ matrix $A$. Different configurations of eigenvalues lead to distinct types of stability, affecting how trajectories in the phase plane behave near the origin.\n\n## Types of Stability\n\n### **Repelling Node (Unstable)**\n\n- **Eigenvalues:** $0 < \\lambda_1 \\leq \\lambda_2$ (both positive real numbers).\n- **Description:** The origin is unstable. Trajectories move away from the origin in all directions. This configuration is known as a _repelling node_.\n\n```{python}\n#| label: repelling-node\n#| code-summary: \"Show Code\"\n\n\n# Define the system of ODEs for a repelling node\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = 3 * x1 + 1 * x2\n    dx2 = 1 * x1 + 3 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = 3 * X1 + 1 * X2\nV = 1 * X1 + 3 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Straight-line solutions (eigenvectors)\nx = np.linspace(-5, 5, 200)\nplt.plot(x, x, 'r', linewidth=3, label=r'Unstable direction, $\\lambda=3$')\nplt.plot(x, -x, 'b', linewidth=3, label=r'Unstable direction, $\\lambda=4$')\n\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Repelling Node (Unstable)\", fontsize=18)\n\n# Add grid and legend\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(loc=\"best\", fontsize=12, framealpha=1.0, frameon=True)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n### **Saddle (Unstable)**\n\n- **Eigenvalues:** $\\lambda_1 < 0 < \\lambda_2$ (one positive and one negative real number).\n- **Description:** The origin is unstable, with trajectories approaching along one direction and moving away along another. This configuration creates a \"saddle\" shape in the phase plane, and is called a _saddle point_.\n\n```{python}\n#| label: saddle\n#| code-summary: \"Show Code\"\n\n\n# Define the system of ODEs for a saddle point\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = 1 * x1 + 2 * x2\n    dx2 = 2 * x1 - 1 * x2\n    return [dx1, dx2]\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Straight-line solutions\nplt.plot(x, x, 'r', linewidth=3, label=r'Unstable direction, $\\lambda=1$')\nplt.plot(x, -x, 'b', linewidth=3, label=r'Stable direction, $\\lambda=-1$')\n\n\n# Labels and title\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Saddle Point (Unstable)\", fontsize=18)\n\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(loc=\"best\", fontsize=12, framealpha=1.0, frameon=True)\nplt.tight_layout()\nplt.show()\n```\n\n### **Attracting Node (Stable)**\n\n- **Eigenvalues:** $\\lambda_1 \\leq \\lambda_2 < 0$ (both negative real numbers).\n- **Description:** The origin is stable, and all trajectories are attracted toward it. This setup is called an _attracting node_, as trajectories converge to the origin from all directions.\n\n```{python}\n#| label: attracting-node\n#| code-summary: \"Show Code\"\n\n# Define the system of ODEs\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = -3 * x1 + 2 * x2\n    dx2 = 2 * x1 - 3 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = -3 * X1 + 2 * X2\nV = 2 * X1 - 3 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Plot the straight-line solutions (eigenvectors)\nx = np.linspace(-5, 5, 200)\nplt.plot(x, x, 'r', linewidth=3, label=r'Stable direction, $\\lambda=-1$')\nplt.plot(x, -x, 'b', linewidth=3, label=r'Stable direction, $\\lambda=-5$')\n\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Attracting Node (Stable)\", fontsize=18)\n\n# Add grid and legend\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(loc=\"best\", fontsize=12, framealpha=1.0, frameon=True)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n### **Spiral Source (Unstable)**\n\n- **Eigenvalues:** $\\lambda = a \\pm bi$ with $a > 0$ (complex eigenvalues with a positive real part).\n- **Description:** The origin is unstable. Trajectories spiral outward away from the origin, creating a _spiral source_.\n\n```{python}\n#| label: spiral-source\n#| code-summary: \"Show Code\"\n\n# Define the system of ODEs for a spiral source (unstable)\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = 1 * x1 - 2 * x2\n    dx2 = 2 * x1 + 1 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = 1 * X1 - 2 * X2\nV = 2 * X1 + 1 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Additional trajectories to show the outward spiral behavior\ninitial_conditions = [\n    [0, .1],\n    [0, -.1],\n    [.1, 0],\n    [-.1, 0],\n]\n\nt_values = np.linspace(0, 5, 500)\nfor ic in initial_conditions:\n    sol = odeint(dx_dt, ic, t_values)\n    plt.plot(sol[:, 0], sol[:, 1], 'green', linestyle='-', linewidth=2)\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Spiral Source (Unstable)\", fontsize=18)\n\n# Add grid\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n### **Center (Stable)**\n\n- **Eigenvalues:** $\\lambda = a \\pm bi$ with $a = 0$ (purely imaginary eigenvalues).\n- **Description:** The origin neither attracts nor repels trajectories. Instead, they form closed orbits around the origin, resulting in a behavior called a _center_. This indicates neutral stability.\n\n```{python}\n#| label: center\n#| code-summary: \"Show Code\"\n\n# Define the system of ODEs for a center (neutral stability)\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = -1 * x2\n    dx2 = 1 * x1\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = -1 * X2\nV = 1 * X1\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Additional trajectories to show the circular motion\ninitial_conditions = [\n    [5, 0],\n    [0, 3],\n    [1, 0]\n\n]\n\nt_values = np.linspace(0, 20, 500)\nfor ic in initial_conditions:\n    sol = odeint(dx_dt, ic, t_values)\n    plt.plot(sol[:, 0], sol[:, 1], 'green', linestyle='-', linewidth=2)\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Center (Neutral Stability)\", fontsize=18)\n\n# Add grid\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n### **Spiral Sink (Stable)**\n\n- **Eigenvalues:** $\\lambda = a \\pm bi$ with $a < 0$ (complex eigenvalues with a negative real part).\n- **Description:** The origin is stable, and trajectories spiral inward toward it, forming a _spiral sink_.\n\n```{python}\n#| label: spiral-sink\n#| code-summary: \"Show Code\"\n\n# Define the system of ODEs for a spiral sink (stable)\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = -1 * x1 - 2 * x2\n    dx2 = 2 * x1 - 1 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = -1 * X1 - 2 * X2\nV = 2 * X1 - 1 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Additional trajectories to show the spiral inward behavior\ninitial_conditions = [\n    [5, 0],\n    [0, 5],\n    [-5, 0],\n    [0, -5],\n]\n\nt_values = np.linspace(0, 10, 500)\nfor ic in initial_conditions:\n    sol = odeint(dx_dt, ic, t_values)\n    plt.plot(sol[:, 0], sol[:, 1], 'green', linestyle='-', linewidth=2)\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Spiral Sink (Stable)\", fontsize=18)\n\n# Add grid and legend\nplt.grid(True, linestyle='--', alpha=0.5)\n\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n## Summary\n\nThe stability of the origin in a $2 \\times 2$ system of differential equations depends on the real and imaginary parts of the eigenvalues of matrix $A$:\n\n- **Real positive eigenvalues** lead to a repelling node (unstable).\n- **Mixed positive and negative real eigenvalues** create a saddle point (unstable).\n- **Real negative eigenvalues** result in an attracting node (stable).\n- **Complex eigenvalues with a positive real part** indicate a spiral source (unstable).\n- **Purely imaginary eigenvalues** create a center (neutral stability).\n- **Complex eigenvalues with a negative real part** lead to a spiral sink (stable).\n\nBy determining the eigenvalues, we can classify the type of stability at the origin and predict the behavior of trajectories in the phase plane.\n","srcMarkdownNoYaml":"\n\n```{python}\n#| label: libraries\n#| include: false\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\n```\n\n## Overview\n\nIn a system of differential equations defined by $\\mathbf{x}' = A \\mathbf{x}$, understanding the stability of the origin (the point $\\mathbf{x} = 0$) is essential. The stability depends on the eigenvalues of the $2 \\times 2$ matrix $A$. Different configurations of eigenvalues lead to distinct types of stability, affecting how trajectories in the phase plane behave near the origin.\n\n## Types of Stability\n\n### **Repelling Node (Unstable)**\n\n- **Eigenvalues:** $0 < \\lambda_1 \\leq \\lambda_2$ (both positive real numbers).\n- **Description:** The origin is unstable. Trajectories move away from the origin in all directions. This configuration is known as a _repelling node_.\n\n```{python}\n#| label: repelling-node\n#| code-summary: \"Show Code\"\n\n\n# Define the system of ODEs for a repelling node\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = 3 * x1 + 1 * x2\n    dx2 = 1 * x1 + 3 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = 3 * X1 + 1 * X2\nV = 1 * X1 + 3 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Straight-line solutions (eigenvectors)\nx = np.linspace(-5, 5, 200)\nplt.plot(x, x, 'r', linewidth=3, label=r'Unstable direction, $\\lambda=3$')\nplt.plot(x, -x, 'b', linewidth=3, label=r'Unstable direction, $\\lambda=4$')\n\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Repelling Node (Unstable)\", fontsize=18)\n\n# Add grid and legend\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(loc=\"best\", fontsize=12, framealpha=1.0, frameon=True)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n### **Saddle (Unstable)**\n\n- **Eigenvalues:** $\\lambda_1 < 0 < \\lambda_2$ (one positive and one negative real number).\n- **Description:** The origin is unstable, with trajectories approaching along one direction and moving away along another. This configuration creates a \"saddle\" shape in the phase plane, and is called a _saddle point_.\n\n```{python}\n#| label: saddle\n#| code-summary: \"Show Code\"\n\n\n# Define the system of ODEs for a saddle point\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = 1 * x1 + 2 * x2\n    dx2 = 2 * x1 - 1 * x2\n    return [dx1, dx2]\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Straight-line solutions\nplt.plot(x, x, 'r', linewidth=3, label=r'Unstable direction, $\\lambda=1$')\nplt.plot(x, -x, 'b', linewidth=3, label=r'Stable direction, $\\lambda=-1$')\n\n\n# Labels and title\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Saddle Point (Unstable)\", fontsize=18)\n\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(loc=\"best\", fontsize=12, framealpha=1.0, frameon=True)\nplt.tight_layout()\nplt.show()\n```\n\n### **Attracting Node (Stable)**\n\n- **Eigenvalues:** $\\lambda_1 \\leq \\lambda_2 < 0$ (both negative real numbers).\n- **Description:** The origin is stable, and all trajectories are attracted toward it. This setup is called an _attracting node_, as trajectories converge to the origin from all directions.\n\n```{python}\n#| label: attracting-node\n#| code-summary: \"Show Code\"\n\n# Define the system of ODEs\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = -3 * x1 + 2 * x2\n    dx2 = 2 * x1 - 3 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = -3 * X1 + 2 * X2\nV = 2 * X1 - 3 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Plot the straight-line solutions (eigenvectors)\nx = np.linspace(-5, 5, 200)\nplt.plot(x, x, 'r', linewidth=3, label=r'Stable direction, $\\lambda=-1$')\nplt.plot(x, -x, 'b', linewidth=3, label=r'Stable direction, $\\lambda=-5$')\n\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Attracting Node (Stable)\", fontsize=18)\n\n# Add grid and legend\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(loc=\"best\", fontsize=12, framealpha=1.0, frameon=True)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n### **Spiral Source (Unstable)**\n\n- **Eigenvalues:** $\\lambda = a \\pm bi$ with $a > 0$ (complex eigenvalues with a positive real part).\n- **Description:** The origin is unstable. Trajectories spiral outward away from the origin, creating a _spiral source_.\n\n```{python}\n#| label: spiral-source\n#| code-summary: \"Show Code\"\n\n# Define the system of ODEs for a spiral source (unstable)\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = 1 * x1 - 2 * x2\n    dx2 = 2 * x1 + 1 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = 1 * X1 - 2 * X2\nV = 2 * X1 + 1 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Additional trajectories to show the outward spiral behavior\ninitial_conditions = [\n    [0, .1],\n    [0, -.1],\n    [.1, 0],\n    [-.1, 0],\n]\n\nt_values = np.linspace(0, 5, 500)\nfor ic in initial_conditions:\n    sol = odeint(dx_dt, ic, t_values)\n    plt.plot(sol[:, 0], sol[:, 1], 'green', linestyle='-', linewidth=2)\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Spiral Source (Unstable)\", fontsize=18)\n\n# Add grid\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n### **Center (Stable)**\n\n- **Eigenvalues:** $\\lambda = a \\pm bi$ with $a = 0$ (purely imaginary eigenvalues).\n- **Description:** The origin neither attracts nor repels trajectories. Instead, they form closed orbits around the origin, resulting in a behavior called a _center_. This indicates neutral stability.\n\n```{python}\n#| label: center\n#| code-summary: \"Show Code\"\n\n# Define the system of ODEs for a center (neutral stability)\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = -1 * x2\n    dx2 = 1 * x1\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = -1 * X2\nV = 1 * X1\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Additional trajectories to show the circular motion\ninitial_conditions = [\n    [5, 0],\n    [0, 3],\n    [1, 0]\n\n]\n\nt_values = np.linspace(0, 20, 500)\nfor ic in initial_conditions:\n    sol = odeint(dx_dt, ic, t_values)\n    plt.plot(sol[:, 0], sol[:, 1], 'green', linestyle='-', linewidth=2)\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Center (Neutral Stability)\", fontsize=18)\n\n# Add grid\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n### **Spiral Sink (Stable)**\n\n- **Eigenvalues:** $\\lambda = a \\pm bi$ with $a < 0$ (complex eigenvalues with a negative real part).\n- **Description:** The origin is stable, and trajectories spiral inward toward it, forming a _spiral sink_.\n\n```{python}\n#| label: spiral-sink\n#| code-summary: \"Show Code\"\n\n# Define the system of ODEs for a spiral sink (stable)\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = -1 * x1 - 2 * x2\n    dx2 = 2 * x1 - 1 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = -1 * X1 - 2 * X2\nV = 2 * X1 - 1 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Additional trajectories to show the spiral inward behavior\ninitial_conditions = [\n    [5, 0],\n    [0, 5],\n    [-5, 0],\n    [0, -5],\n]\n\nt_values = np.linspace(0, 10, 500)\nfor ic in initial_conditions:\n    sol = odeint(dx_dt, ic, t_values)\n    plt.plot(sol[:, 0], sol[:, 1], 'green', linestyle='-', linewidth=2)\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Spiral Sink (Stable)\", fontsize=18)\n\n# Add grid and legend\nplt.grid(True, linestyle='--', alpha=0.5)\n\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n## Summary\n\nThe stability of the origin in a $2 \\times 2$ system of differential equations depends on the real and imaginary parts of the eigenvalues of matrix $A$:\n\n- **Real positive eigenvalues** lead to a repelling node (unstable).\n- **Mixed positive and negative real eigenvalues** create a saddle point (unstable).\n- **Real negative eigenvalues** result in an attracting node (stable).\n- **Complex eigenvalues with a positive real part** indicate a spiral source (unstable).\n- **Purely imaginary eigenvalues** create a center (neutral stability).\n- **Complex eigenvalues with a negative real part** lead to a spiral sink (stable).\n\nBy determining the eigenvalues, we can classify the type of stability at the origin and predict the behavior of trajectories in the phase plane.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":{"source":false,"toggle":true,"caption":"See code"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"self-contained":true,"toc-depth":2,"number-sections":false,"html-math-method":"katex","embed-resources":true,"output-file":"stability-of-origin-2x2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":{"light":"flatly","dark":"darkly"},"title":"Stability of the Origin in 2x2 Systems of Differential Equations","author":"Nathan Lunceford","preview":{"port":3000,"browser":true,"watch-inputs":true,"navigate":true},"page-layout":"full","toc-location":"right","code-summary":"Show the code","code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}