{
  "hash": "b2114d38a96deffa90dffa473539915d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Stability of the Origin in 2x2 Systems of Differential Equations'\nauthor: 'Nathan Lunceford'\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    toc: true\n    toc-depth: 2\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    embed-resources: true\n    code-fold: true\n    code-summary: 'Show the code'\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n      source: false\n      toggle: true\n      caption: See code\nengine: jupyter\npreview:\n  port: 3000\n  browser: true\n  watch-inputs: true\n  navigate: true\n---\n\n\n## Overview\n\nIn a system of differential equations defined by $\\mathbf{x}' = A \\mathbf{x}$, understanding the stability of the origin (the point $\\mathbf{x} = 0$) is essential. The stability depends on the eigenvalues of the $2 \\times 2$ matrix $A$. Different configurations of eigenvalues lead to distinct types of stability, affecting how trajectories in the phase plane behave near the origin.\n\n## Types of Stability\n\n### **Repelling Node (Unstable)**\n\n- **Eigenvalues:** $0 < \\lambda_1 \\leq \\lambda_2$ (both positive real numbers).\n- **Description:** The origin is unstable. Trajectories move away from the origin in all directions. This configuration is known as a _repelling node_.\n\n::: {#cell-repelling-node .cell execution_count=2}\n``` {.python .cell-code code-summary=\"Show Code\"}\n# Define the system of ODEs for a repelling node\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = 3 * x1 + 1 * x2\n    dx2 = 1 * x1 + 3 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = 3 * X1 + 1 * X2\nV = 1 * X1 + 3 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Straight-line solutions (eigenvectors)\nx = np.linspace(-5, 5, 200)\nplt.plot(x, x, 'r', linewidth=3, label=r'Unstable direction, $\\lambda=3$')\nplt.plot(x, -x, 'b', linewidth=3, label=r'Unstable direction, $\\lambda=4$')\n\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Repelling Node (Unstable)\", fontsize=18)\n\n# Add grid and legend\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(loc=\"best\", fontsize=12, framealpha=1.0, frameon=True)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](stability-of-origin-2x2_files/figure-html/repelling-node-output-1.png){#repelling-node width=758 height=757}\n:::\n:::\n\n\n### **Saddle (Unstable)**\n\n- **Eigenvalues:** $\\lambda_1 < 0 < \\lambda_2$ (one positive and one negative real number).\n- **Description:** The origin is unstable, with trajectories approaching along one direction and moving away along another. This configuration creates a \"saddle\" shape in the phase plane, and is called a _saddle point_.\n\n::: {#cell-saddle .cell execution_count=3}\n``` {.python .cell-code code-summary=\"Show Code\"}\n# Define the system of ODEs for a saddle point\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = 1 * x1 + 2 * x2\n    dx2 = 2 * x1 - 1 * x2\n    return [dx1, dx2]\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Straight-line solutions\nplt.plot(x, x, 'r', linewidth=3, label=r'Unstable direction, $\\lambda=1$')\nplt.plot(x, -x, 'b', linewidth=3, label=r'Stable direction, $\\lambda=-1$')\n\n\n# Labels and title\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Saddle Point (Unstable)\", fontsize=18)\n\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(loc=\"best\", fontsize=12, framealpha=1.0, frameon=True)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](stability-of-origin-2x2_files/figure-html/saddle-output-1.png){#saddle width=758 height=757}\n:::\n:::\n\n\n### **Attracting Node (Stable)**\n\n- **Eigenvalues:** $\\lambda_1 \\leq \\lambda_2 < 0$ (both negative real numbers).\n- **Description:** The origin is stable, and all trajectories are attracted toward it. This setup is called an _attracting node_, as trajectories converge to the origin from all directions.\n\n::: {#cell-attracting-node .cell execution_count=4}\n``` {.python .cell-code code-summary=\"Show Code\"}\n# Define the system of ODEs\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = -3 * x1 + 2 * x2\n    dx2 = 2 * x1 - 3 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = -3 * X1 + 2 * X2\nV = 2 * X1 - 3 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Plot the straight-line solutions (eigenvectors)\nx = np.linspace(-5, 5, 200)\nplt.plot(x, x, 'r', linewidth=3, label=r'Stable direction, $\\lambda=-1$')\nplt.plot(x, -x, 'b', linewidth=3, label=r'Stable direction, $\\lambda=-5$')\n\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Attracting Node (Stable)\", fontsize=18)\n\n# Add grid and legend\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(loc=\"best\", fontsize=12, framealpha=1.0, frameon=True)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](stability-of-origin-2x2_files/figure-html/attracting-node-output-1.png){#attracting-node width=758 height=757}\n:::\n:::\n\n\n### **Spiral Source (Unstable)**\n\n- **Eigenvalues:** $\\lambda = a \\pm bi$ with $a > 0$ (complex eigenvalues with a positive real part).\n- **Description:** The origin is unstable. Trajectories spiral outward away from the origin, creating a _spiral source_.\n\n::: {#cell-spiral-source .cell execution_count=5}\n``` {.python .cell-code code-summary=\"Show Code\"}\n# Define the system of ODEs for a spiral source (unstable)\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = 1 * x1 - 2 * x2\n    dx2 = 2 * x1 + 1 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = 1 * X1 - 2 * X2\nV = 2 * X1 + 1 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Additional trajectories to show the outward spiral behavior\ninitial_conditions = [\n    [0, .1],\n    [0, -.1],\n    [.1, 0],\n    [-.1, 0],\n]\n\nt_values = np.linspace(0, 5, 500)\nfor ic in initial_conditions:\n    sol = odeint(dx_dt, ic, t_values)\n    plt.plot(sol[:, 0], sol[:, 1], 'green', linestyle='-', linewidth=2)\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Spiral Source (Unstable)\", fontsize=18)\n\n# Add grid\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](stability-of-origin-2x2_files/figure-html/spiral-source-output-1.png){#spiral-source width=758 height=757}\n:::\n:::\n\n\n### **Center (Stable)**\n\n- **Eigenvalues:** $\\lambda = a \\pm bi$ with $a = 0$ (purely imaginary eigenvalues).\n- **Description:** The origin neither attracts nor repels trajectories. Instead, they form closed orbits around the origin, resulting in a behavior called a _center_. This indicates neutral stability.\n\n::: {#cell-center .cell execution_count=6}\n``` {.python .cell-code code-summary=\"Show Code\"}\n# Define the system of ODEs for a center (neutral stability)\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = -1 * x2\n    dx2 = 1 * x1\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = -1 * X2\nV = 1 * X1\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Additional trajectories to show the circular motion\ninitial_conditions = [\n    [5, 0],\n    [0, 3],\n    [1, 0]\n\n]\n\nt_values = np.linspace(0, 20, 500)\nfor ic in initial_conditions:\n    sol = odeint(dx_dt, ic, t_values)\n    plt.plot(sol[:, 0], sol[:, 1], 'green', linestyle='-', linewidth=2)\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Center (Neutral Stability)\", fontsize=18)\n\n# Add grid\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](stability-of-origin-2x2_files/figure-html/center-output-1.png){#center width=758 height=757}\n:::\n:::\n\n\n### **Spiral Sink (Stable)**\n\n- **Eigenvalues:** $\\lambda = a \\pm bi$ with $a < 0$ (complex eigenvalues with a negative real part).\n- **Description:** The origin is stable, and trajectories spiral inward toward it, forming a _spiral sink_.\n\n::: {#cell-spiral-sink .cell execution_count=7}\n``` {.python .cell-code code-summary=\"Show Code\"}\n# Define the system of ODEs for a spiral sink (stable)\ndef dx_dt(X, t):\n    x1, x2 = X\n    dx1 = -1 * x1 - 2 * x2\n    dx2 = 2 * x1 - 1 * x2\n    return [dx1, dx2]\n\n# Generate grid for direction field\nx1_vals = np.linspace(-5, 5, 35)\nx2_vals = np.linspace(-5, 5, 35)\nX1, X2 = np.meshgrid(x1_vals, x2_vals)\n\n# Calculate slopes for direction field\nU = -1 * X1 - 2 * X2\nV = 2 * X1 - 1 * X2\n\n# Normalize the direction field arrows\nspeed = np.sqrt(U**2 + V**2)\nepsilon = 1e-10  # Small value to prevent division by zero\nU_norm = U / (speed + epsilon)\nV_norm = V / (speed + epsilon)\n\n# Plot the direction field\nplt.figure(figsize=(8, 8))\nplt.quiver(X1, X2, U_norm, V_norm, angles=\"xy\", color=\"black\", scale=40, alpha=0.4, width=0.0035)\n\n# Additional trajectories to show the spiral inward behavior\ninitial_conditions = [\n    [5, 0],\n    [0, 5],\n    [-5, 0],\n    [0, -5],\n]\n\nt_values = np.linspace(0, 10, 500)\nfor ic in initial_conditions:\n    sol = odeint(dx_dt, ic, t_values)\n    plt.plot(sol[:, 0], sol[:, 1], 'green', linestyle='-', linewidth=2)\n\n# Set plot limits and labels\nplt.xlim(-5, 5)\nplt.ylim(-5, 5)\nplt.xlabel(\"$x_1$\", fontsize=14)\nplt.ylabel(\"$x_2$\", fontsize=14)\nplt.title(\"Spiral Sink (Stable)\", fontsize=18)\n\n# Add grid and legend\nplt.grid(True, linestyle='--', alpha=0.5)\n\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](stability-of-origin-2x2_files/figure-html/spiral-sink-output-1.png){#spiral-sink width=758 height=757}\n:::\n:::\n\n\n## Summary\n\nThe stability of the origin in a $2 \\times 2$ system of differential equations depends on the real and imaginary parts of the eigenvalues of matrix $A$:\n\n- **Real positive eigenvalues** lead to a repelling node (unstable).\n- **Mixed positive and negative real eigenvalues** create a saddle point (unstable).\n- **Real negative eigenvalues** result in an attracting node (stable).\n- **Complex eigenvalues with a positive real part** indicate a spiral source (unstable).\n- **Purely imaginary eigenvalues** create a center (neutral stability).\n- **Complex eigenvalues with a negative real part** lead to a spiral sink (stable).\n\nBy determining the eigenvalues, we can classify the type of stability at the origin and predict the behavior of trajectories in the phase plane.\n\n",
    "supporting": [
      "stability-of-origin-2x2_files"
    ],
    "filters": [],
    "includes": {}
  }
}