{
  "hash": "9111796965da383210d937b9fa363d13",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Exercise 3.1.1c (C3-P1)'\nsubtitle: 'MATH411'\nauthor: 'Nathan Lunceford'\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    toc: true\n    toc-depth: 1\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    embed-resources: true\n    code-fold: true\n    code-summary: 'Show the code'\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n      source: false\n      toggle: true\n      caption: See code\nengine: jupyter\npreview:\n  port: 3000\n  browser: true\n  watch-inputs: true\n  navigate: true\n---\n\n\n## **Question**\n\n**Use [Lagrange interpolation](../../notes/w02/lagrange-interpolation.html) to find a polynomial that passes through the points $(0, -2), (2, 1), (4, 4)$.**\n\nThe Lagrange interpolation polynomial for three points $(x_1, y_1), (x_2, y_2),$ and $(x_3, y_3)$ is given by the formula:\n\n$$P(x) = y_1 \\frac{(x - x_2)(x - x_3)}{(x_1 - x_2)(x_1 - x_3)} + y_2 \\frac{(x - x_1)(x - x_3)}{(x_2 - x_1)(x_2 - x_3)} + y_3 \\frac{(x - x_1)(x - x_2)}{(x_3 - x_1)(x_3 - x_2)}$$\n\nThe points are:\n\n- $(x_1, y_1) = (0, -2)$\n- $(x_2, y_2) = (2, 1)$\n- $(x_3, y_3) = (4, 4)$\n\n### **Step-by-step calculation:**\n\n1. **First term** (corresponding to $(x_1, y_1) = (0, -2)$):\n\n$$\n-2 \\cdot \\frac{(x - 2)(x - 4)}{(0 - 2)(0 - 4)} = -2 \\cdot \\frac{(x - 2)(x - 4)}{(-2)(-4)} = -2 \\cdot \\frac{(x - 2)(x - 4)}{8} = \\frac{-1}{4}(x - 2)(x - 4)\n$$\n\n2. **Second term** (corresponding to $(x_2, y_2) = (2, 1)$)\n\n$$\n1 \\cdot \\frac{(x - 0)(x - 4)}{(2 - 0)(2 - 4)} = 1 \\cdot \\frac{x(x - 4)}{(2)(-2)} = \\frac{x(x - 4)}{-4}\n$$\n\n3. **Third term** (corresponding to $(x_3, y_3) = (4, 4)$):\n\n$$\n4 \\cdot \\frac{(x - 0)(x - 2)}{(4 - 0)(4 - 2)} = 4 \\cdot \\frac{x(x - 2)}{(4)(2)} = 4 \\cdot \\frac{x(x - 2)}{8} = \\frac{x(x - 2)}{2}\n$$\n\n### **Combine the terms:**\n\n$$\nP(x) = \\frac{-1}{4}(x - 2)(x - 4) + \\frac{x(x - 4)}{-4} + \\frac{x(x - 2)}{2}\n$$\n\n### **Simplify:**\n\nFirst term:\n\n$$\n\\frac{-1}{4}(x - 2)(x - 4) = \\frac{-x^2 + 6x - 8}{4}\n$$\n\nSecond term:\n\n$$\n\\frac{-x(x - 4)}{4} = \\frac{-x^2 + 4x}{4}\n$$\n\nThird term:\n\n$$\n\\frac{x(x - 2)}{2} = \\frac{x^2 - 2x}{2}\n$$\n\nCombine the terms:\n\n$$\nP(x) = \\frac{-x^2 + 6x - 8}{4} + \\frac{-x^2 + 4x}{4} + \\frac{x^2 - 2x}{2}\n$$\n\nTo combine, first rewrite everything with a denominator of 4:\n\n$$\nP(x) = \\frac{-x^2 + 6x - 8 - x^2 + 4x}{4} + \\frac{x^2 - 2x}{2}\n$$\n\nConvert the second term to have a denominator of 4:\n\n$$\nP(x) = \\frac{-x^2 + 6x - 8 - x^2 + 4x}{4} + \\frac{2x^2 - 4x}{4}\n$$\n\nNow simplify:\n\n$$\nP(x) = \\frac{-2x^2 + 10x - 8}{4} + \\frac{2x^2 - 4x}{4}\n$$\n\n$$\nP(x) = \\frac{6x - 8}{4} = \\frac{3x - 4}{2}\n$$\n\nFinal polynomial:\n\n$$\nP(x) = \\frac{3x - 4}{2}\n$$\n\nThis is the interpolating polynomial that passes through the points $(0, -2)$, $(2, 1)$, and $(4, 4)$.\n\n::: {#cell-Graph .cell execution_count=2}\n``` {.python .cell-code code-summary=\"Create graph with resulting polynomial\"}\n# Define the Lagrange interpolating polynomial\ndef lagrange_polynomial(x):\n    return (3 * x - 4) / 2\n\n# Create an array of x values from -1 to 5 for the graph\nx_values = np.linspace(-1, 5, 400)\n\n# Compute the corresponding y values using the polynomial function\ny_values = lagrange_polynomial(x_values)\n\n# Plot the polynomial curve\nplt.figure(figsize=(8, 6))\nplt.plot(x_values, y_values, label=\"P(x) = (3x - 4) / 2\", color=\"blue\")\n\n# Plot the given points (0,-2), (2,1), (4,4)\ndata_points_x = [0, 2, 4]\ndata_points_y = [-2, 1, 4]\nplt.scatter(data_points_x, data_points_y, color=\"red\", label=\"Data Points\", zorder=5)\n\n# Add labels, title, and legend\nplt.title(\"Lagrange Interpolating Polynomial\")\nplt.xlabel(\"x\")\nplt.ylabel(\"P(x)\")\n\n# Set x and y ticks to have increments of 1\nplt.xticks(np.arange(-1, 6, 1))\nplt.yticks(np.arange(-4, 5, 1))\n\nplt.axhline(0, color='black',linewidth=0.5)\nplt.axvline(0, color='black',linewidth=0.5)\nplt.grid(True)\nplt.legend()\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](exercise3-1-1c_files/figure-html/graph-output-1.png){#graph width=662 height=523}\n:::\n:::\n\n\n",
    "supporting": [
      "exercise3-1-1c_files"
    ],
    "filters": [],
    "includes": {}
  }
}