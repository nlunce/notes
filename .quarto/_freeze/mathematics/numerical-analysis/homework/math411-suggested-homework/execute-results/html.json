{
  "hash": "d816d6810dfb658b581b79d9fbbc28a4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'MATH411 Suggested Homework - Fall 2024'\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    toc: true\n    toc-depth: 1\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    embed-resources: true\n    code-fold: true\n    code-summary: 'Show the code'\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n      source: false\n      toggle: true\n      caption: See code\nengine: jupyter\npreview:\n  port: 3000\n  browser: true\n  watch-inputs: true\n  navigate: true\n---\n\n\n# Week 1\n\n---\n\n**(C0-P1)** Read/work through the _Getting Started with Python_ notebook (see Modules > Homework > Getting_Started_with_Python.ipynb). Then complete the following exercises in a separate notebook or `.py` file:\n\na. What is the difference between the outputs generated by the following two lines of code?\n\n```python\nnp.array([i for i in range(10)])\nnp.linspace(0, 9, 10, endpoint=True)\n```\n\nb. Use both `np.linspace()` and `np.arange()` to create an array containing floating point numbers starting at 1.0, ending at 4.0, equally spaced with separation 0.2. In other words, the array should contain 1.0, 1.2, 1.4, ..., 3.8, 4.0.\n\nc. Create an array consisting of the floats 1.0, 2.0, 3.0, 4.0, and 5.0. Create a second array containing the square root of each of these numbers. Then, use a `for` loop to compute the sum of the squared differences between the two arrays:\n\n$$\n\\sum_{i=1}^n \\left(x_i - \\sqrt{x_i}\\right)^2\n$$\n\n**Extra Challenge**: Can you do this without a loop?\n\nd. Starting with $x = 1$, use a `while` loop to divide by 2 until $x < 10^{-4}$. Display (print) the list 1.0, 0.5, 0.25, ..., and report the number of divisions by 2 needed such that the $(k-1)$th division produces $x > 10^{-4}$ and the $k$th division produces $x < 10^{-4}$.\n\ne. Write code to create a function to compute $f(x) = e^{-x} \\cos x$, where $x$ is a vector (array) of one or more numbers. Then evaluate $f(x)$ at the points 0, 0.1, 0.2, ..., 1.0.\n\nf. Write code to plot the function $h(x) = e^{x} \\cos^2 x - 2$ on the interval -0.5 to 5.5 and visually estimate the roots of $h(x)$ on that interval.\n\n**(C1-P1)** Exercise 1.1.4ab  \n**(C1-P2)** Exercise 1.2.2  \n**(C1-P3)** Computer Problem 1.2.2ab. For each equation, find an initial point $x_0$ and a function $g(x)$ such that the fixed-point iteration $x_{k+1} = g(x_k)$ converges to $x$, where $g(x) = x$. If this is not possible, explain why.\n\n**(C1-P4)** Exercise 1.2.14  \n**(C1-P5)** Exercise 1.4.1  \n**(C1-P6)** Exercise 1.4.3\n\n# Week 2\n\n---\n\n**(C1-P7)** Exercise 1.4.6  \n**(C1-P8)** Exercise 1.4.8  \n**(C1-P9)** Computer Problem 1.4.7  \n**(C1-P10)** Exercise 1.5.1  \n**(C1-P11)** Use Python to compare results obtained using the Bisection Method, Newton’s Method, and the Secant Method to solve the equation $\\ln x + x^2 = 3$. Note that Python code for these methods is available on I-Learn.\n\na. Solve the problem using each of the three methods. Report starting values and the number of iterations required to obtain 6 correct decimal places of accuracy. **Hint**: a graph of the function may help with starting values.\n\nb. On the same axes, plot $\\log(\\epsilon_{i+1})$ vs. $\\log(\\epsilon_i)$ for the three methods. Explain your plot. How is it related to the rate or order of convergence? Use the errors to determine if your results are consistent with theory. How would you compute the error if you didn’t have an exact value for the root?\n\n**(C3-P1)** Exercise 3.1.1ac  \n**(C3-P2)** Exercise 3.1.2ac  \n**(C3-P3)** Exercise 3.1.6\n\n# Week 3\n\n---\n\n**(C0-P2)** Create a Python function that takes as input three points (six scalars, three pairs, or perhaps a 6-element numpy array—choose a method that makes sense to you) and uses the `matplotlib` package to create a figure window and then render a triangle with small open circles at each of the points and straight lines between each pair of circles. Include code to save your figure to a `.png` or `.jpg` file. Validate your function with the points (1, 2), (2, 1), and (2, 3).\n\n**(C3-P4)** Exercise 3.2.2  \n**(C3-P5)** Exercise 3.2.5  \n**(C3-P6)** Exercise 3.2.6 **Note**: the two additional points in the next-to-last sentence should be $(x_7, y_7) = (0.1, f(0.1))$ and $(x_8, y_8) = (0.5, f(0.5))$.\n\n**(C3-P7)** Computer Problem 3.1.3. To demonstrate that your function works, interpolate $\\sin(x)$ on the interval $[-\\pi, \\pi]$ using nodes $-\\pi, -\\frac{\\pi}{2}, 0, \\frac{\\pi}{2}, \\pi$. Plot your interpolating polynomial. Plot $\\sin(x)$ on the same graph, and use the numpy functions `polyfit` and `polyval` to plot an interpolating polynomial from Python on the same graph. Use a legend to make clear which curve is yours and which one came from Python. **Hint**: the code on p. 146 should help. Python versions of `newtdd` and `nest` (p. 3) are available in Canvas.\n\n**(C3-P8)** Exercise 3.3.2ac  \n**(C3-P9)** Exercise 3.3.2ac  \n**(C3-P10)** Exercise 3.3.3\n\n# Week 4\n\n---\n\n**(C5-P1)** Exercise 5.2.1ab  \n**(C5-P2)** Exercise 5.2.2ab  \n**(C5-P3)** Exercise 5.2.3ab  \n**(C5-P4)** Exercise 5.2.10  \n**(C5-P5)** Exercise 5.2.12  \n**(C5-P6)** Computer Problem 5.2.1ac  \n**(C5-P7)** Computer Problem 5.2.2de  \n**(C5-P8)** Computer Problem 5.2.9bf\n\n# Week 5\n\n---\n\n**(C5-P9)** Exercise 5.5.1ab  \n**(C5-P10)** Exercise 5.5.4cd  \n**(C5-P11)** Computer Problem 5.4.1acd  \n**(C5-P12)** Computer Problem 5.4.2  \n**(C5-P13)** Computer Problem 5.4.3acd  \n**(C5-P14)** Exercise 5.5.5cd  \n**(C5-P15)** Exercise 5.5.7\n\n# Week 6\n\n---\n\n**(C2-P1)** Exercise 2.1.2ac  \n**(C2-P2)** Computer Problem 2.1.2ac  \n**(C2-P3)** Exercise 2.2.1ab  \n**(C2-P4)** Exercise 2.2.2ab\n\n# Week 7\n\n---\n\n**(C2-P5)** Exercise 2.2.4  \n**(C2-P6)** Computer Problem 2.2.1ab  \n**(C2-P7)** Exercise 2.4.1ab  \n**(C2-P8)** Exercise 2.4.2ab  \n**(C2-P9)** Exercise 2.4.4a  \n**(C2-P10)** Exercise 2.4.6\n\n# Week 8\n\n---\n\n**(C2-P11)** Exercise 2.5.2ab  \n**(C2-P12)** Computer Problem 2.5.2 (solve using both Jacobi and Gauss-Seidel, compare results)  \n**(C4-P1)** Exercise 4.1.2  \n**(C4-P2)** Computer Problem 4.1.5 (also use a quadratic fit and compare)  \n**(C4-P3)** Exercise 4.3.2\n\n# Week 9\n\n---\n\n**(C4-P4)** Exercise 4.3.4 (use the matrix from Exercise 4.3.1d)  \n**(C4-P5)** Exercise 4.3.7 (you can use your QR factorizations from Exercise 4.3.2)  \n**(C4-P6)** Computer Problem 4.3.4 Additional instructions: Write a classical Gram-Schmidt code only. Use the matrices in Exercise 4.3.2 to check your code. If you use the code I provided, you must comment it (explain what every line does).\n\n# Week 10\n\n---\n\n**(C4-P7)** Exercise 4.4.2  \n**(C4-P8)** Exercise 4.4.3  \n**(C4-P9)** Computer Problem 4.4.2 (find a preconditioned GMRES Python code and use it)\n\n# Week 11\n\n---\n\n**None**  \n**Exam 2 in class on Monday Week 11**  \nAttempt the first several Week 12 problems before Monday Week 12\n\n# Week 12\n\n---\n\n**(C10-P1)** Exercise 10.1.1ad (also, find the inverse DFT of your result, compare to the original vector)  \n**(C10-P2)** Exercise 10.1.8  \n**(C10-P3)** Exercise 10.2.1ab  \n**(C10-P4)** Exercise 10.2.3ab  \n**(C10-P5)** Exercise 10.2.3 (plot data and function to show your interpolating function does interpolate the data)  \n**(C10-P6)** Computer Problem 10.2.4  \n**(C10-P7)** Exercise 10.3.2ab\n\n# Week 13\n\n---\n\n**(C10-P8)** Computer Problem 10.3.2cd  \n**(C10-P9)** Exercise 10.3.5 (Complete the $\\sum_{j=0}^{n-1} \\cos \\frac{2 \\pi j k}{n} \\cos \\frac{2 \\pi j l}{n}$ result only)  \n**(C10-P10)** Exercise 10.1.6\n\n",
    "supporting": [
      "math411-suggested-homework_files"
    ],
    "filters": [],
    "includes": {}
  }
}