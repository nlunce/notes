{
  "hash": "805245616c698691b74eb5551d48fbe6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Exercise 3.1.1c (C3-P1)'\nsubtitle: 'MATH411'\nauthor: 'Nathan Lunceford'\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    toc: true\n    toc-depth: 3\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    embed-resources: true\n    code-fold: true\n    code-summary: 'Show the code'\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n      source: false\n      toggle: true\n      caption: See code\nengine: jupyter\npreview:\n  port: 3000\n  browser: true\n  watch-inputs: true\n  navigate: true\n---\n\n\n## Question\n\n**Create a Python function that takes as input three points (six scalars, three pairs, or perhaps a 6-element numpy arrayâ€“choose a method that makes sense to you) and uses the matplotlib package to create a figure window and then render a triangle with small open circles at each of the points and straight lines between each pair of circles. Include code to save your figure to a .png or .jpg file. Validate your function with the points (1, 2), (2, 1), and (2, 3).**\n\n::: {#cell-Function .cell execution_count=2}\n``` {.python .cell-code code-summary=\"Create function and figure\"}\n# Define the function\ndef plot_triangle(points, save_path='triangle_plot.png'):\n    \"\"\"\n    Takes an input of three points (a list of 3 tuples or a 3x2 numpy array)\n    and plots a triangle with small open circles at each of the points.\n    The triangle is rendered with lines connecting each point.\n\n    Parameters:\n    points (list of tuples or numpy array): Points representing the vertices of the triangle.\n    save_path (str): File path to save the plotted figure.\n    \"\"\"\n\n    # Ensure points is a numpy array\n    points = np.array(points)\n\n    # Check if the input is in the correct shape (3x2)\n    if points.shape != (3, 2):\n        raise ValueError(\"Input should be a list of 3 points, each as a pair of (x, y) coordinates.\")\n\n    # Extract the x and y coordinates\n    x_coords = points[:, 0]\n    y_coords = points[:, 1]\n\n    # Close the triangle by repeating the first point at the end\n    x_closed = np.append(x_coords, x_coords[0])\n    y_closed = np.append(y_coords, y_coords[0])\n\n    # Create the plot\n    plt.figure(figsize=(6, 6))\n\n    # Plot the triangle with open circles at each vertex\n    plt.plot(x_closed, y_closed, 'b-', marker='o', markerfacecolor='none',\n             markeredgecolor='r', markersize=10, label='Triangle')\n\n    # Set labels and title\n    plt.title(\"Triangle with Given Vertices\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n\n    # Set axis limits for better visualization\n    plt.xlim(min(x_closed) - 1, max(x_closed) + 1)\n    plt.ylim(min(y_closed) - 1, max(y_closed) + 1)\n\n    # Add grid for better visualization\n    plt.grid(True)\n\n\n    # Save the figure\n    plt.savefig(save_path, dpi=300)\n\n    # Show the plot\n   #  plt.show()\n\n# Test the function with the points (1, 2), (2, 1), and (2, 3)\ntest_points = [(1, 2), (2, 1), (2, 3)]\nplot_triangle(test_points, save_path='triangle_plot.png')\n```\n\n::: {.cell-output .cell-output-display}\n![](c0-p2_files/figure-html/function-output-1.png){#function width=525 height=523}\n:::\n:::\n\n\n### **Explanation:**\n\n1. **Function Definition:**\n\n   - **`plot_triangle`**: This function takes in three points and an optional `save_path` parameter to specify where to save the plot.\n   - **Parameters:**\n     - `points`: A list of three tuples representing the vertices of the triangle or a 3x2 numpy array.\n     - `save_path`: The file path where the plot image will be saved (default is `'triangle_plot.png'`).\n\n2. **Input Validation:**\n\n   - The function first converts the input `points` to a numpy array and checks if it has the correct shape `(3, 2)`. If not, it raises a `ValueError`.\n\n3. **Plotting:**\n\n   - **Closing the Triangle:** To draw a complete triangle, the first point is appended to the end of the `x_coords` and `y_coords` arrays.\n   - **Plotting Lines and Markers:**\n     - The triangle is plotted with blue lines (`'b-'`) connecting the points.\n     - Small open red circles (`marker='o'`, `markerfacecolor='none'`, `markeredgecolor='r'`) are placed at each vertex.\n   - **Labels and Grid:** The plot includes titles, axis labels, and a grid for better visualization.\n\n4. **Saving and Displaying the Plot:**\n   - The plot is saved as a `.png` file with a resolution of 300 DPI.\n   - The plot window is then displayed using `plt.show()`.\n\n### **Result:**\n\nAfter running the function with the test points `(1, 2)`, `(2, 1)`, and `(2, 3)`, the resulting triangle will be saved as `triangle_plot.png` and displayed as shown below:\n\n![Triangle Plot](triangle_plot.png)\n\n",
    "supporting": [
      "c0-p2_files"
    ],
    "filters": [],
    "includes": {}
  }
}