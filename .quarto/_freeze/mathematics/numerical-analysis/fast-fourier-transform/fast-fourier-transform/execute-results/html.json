{
  "hash": "f3109e1e436e682a55c0a782094519b5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'The Fast Fourier Transform (FFT)'\nauthor: 'Nathan Lunceford'\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    toc: true\n    toc-depth: 3\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    embed-resources: true\n    code-fold: true\n    code-summary: 'Show Code'\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n      source: false\n      toggle: true\n      caption: See code\nengine: jupyter\npreview:\n  port: 3000\n  browser: true\n  watch-inputs: true\n  navigate: true\n---\n\n\n## **Overview**\n\nThe **Fast Fourier Transform (FFT)** is an efficient algorithm to compute the **Discrete Fourier Transform (DFT)**. By recursively breaking the DFT into smaller DFTs, the FFT reduces the computational complexity from $O(n^2)$ to $O(n \\log n)$, making it essential for signal processing, image analysis, and many other fields.\n\n## **The Discrete Fourier Transform (DFT)**\n\nThe DFT transforms a sequence of $n$ samples $x_j$ in the time domain into its frequency components $y_k$:\n\n$$\ny_k = \\frac{1}{\\sqrt{n}} \\sum_{j=0}^{n-1} x_j \\omega^{jk}, \\quad \\omega = e^{-i \\frac{2\\pi}{n}}, \\quad k = 0, 1, \\dots, n-1\n$$\n\nHere:\n\n- $x_j$: The input samples in the time domain.\n- $y_k$: The output frequency components.\n- $\\omega = e^{-i \\frac{2\\pi}{n}}$: The primitive $n$-th root of unity.\n\nThe **Inverse DFT (IDFT)** reconstructs the time-domain signal from its frequency components:\n\n$$\nx_j = \\frac{1}{\\sqrt{n}} \\sum_{k=0}^{n-1} y_k \\omega^{-jk}, \\quad j = 0, 1, \\dots, n-1\n$$\n\nThe FFT optimizes the computation of the DFT by exploiting symmetries in the roots of unity $e^{-2\\pi i / n}$.\n\n## **FFT Algorithm**\n\n### **Expand the DFT**\n\nConsider the DFT for $n = 4$. The transformation can be written as a matrix-vector product:\n\n$$\n\\begin{bmatrix}\nz_0 \\\\\nz_1 \\\\\nz_2 \\\\\nz_3\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n\\omega^{0 \\cdot 0} & \\omega^{0 \\cdot 1} & \\omega^{0 \\cdot 2} & \\omega^{0 \\cdot 3} \\\\\n\\omega^{1 \\cdot 0} & \\omega^{1 \\cdot 1} & \\omega^{1 \\cdot 2} & \\omega^{1 \\cdot 3} \\\\\n\\omega^{2 \\cdot 0} & \\omega^{2 \\cdot 1} & \\omega^{2 \\cdot 2} & \\omega^{2 \\cdot 3} \\\\\n\\omega^{3 \\cdot 0} & \\omega^{3 \\cdot 1} & \\omega^{3 \\cdot 2} & \\omega^{3 \\cdot 3}\n\\end{bmatrix}\n\\begin{bmatrix}\nx_0 \\\\\nx_1 \\\\\nx_2 \\\\\nx_3\n\\end{bmatrix}\n$$\n\nwhere $\\omega = e^{-i \\frac{2\\pi}{4}} = e^{-i \\frac{\\pi}{2}}$.\n\nCompute $\\omega^k$ for $k = 0, 1, 2, 3$:\n\n- $\\omega^0 = e^{-i 0} = 1$\n- $\\omega^1 = e^{-i \\frac{\\pi}{2}} = -i$\n- $\\omega^2 = e^{-i \\pi} = -1$\n- $\\omega^3 = e^{-i \\frac{3\\pi}{2}} = i$\n\nExpanding the terms gives:\n\n1. **For $z_0$ ( $k = 0$ ):**\n\n   $$\n   \\begin{align*}\n   z_0 &= x_0 \\omega^{0 \\cdot 0} + x_1 \\omega^{0 \\cdot 1} + x_2 \\omega^{0 \\cdot 2} + x_3 \\omega^{0 \\cdot 3} \\\\\n       &= x_0 (1) + x_1 (1) + x_2 (1) + x_3 (1) \\\\\n       &= x_0 + x_1 + x_2 + x_3\n   \\end{align*}\n   $$\n\n2. **For $z_1$ ( $k = 1$ ):**\n\n   $$\n   \\begin{align*}\n   z_1 &= x_0 \\omega^{0 \\cdot 1} + x_1 \\omega^{1 \\cdot 1} + x_2 \\omega^{2 \\cdot 1} + x_3 \\omega^{3 \\cdot 1} \\\\\n       &= x_0 (1) + x_1 (-i) + x_2 (-1) + x_3 (i)\n   \\end{align*}\n   $$\n\n3. **For $z_2$ ( $k = 2$ ):**\n\n   $$\n   \\begin{align*}\n   z_2 &= x_0 \\omega^{0 \\cdot 2} + x_1 \\omega^{1 \\cdot 2} + x_2 \\omega^{2 \\cdot 2} + x_3 \\omega^{3 \\cdot 2} \\\\\n       &= x_0 (1) + x_1 (-1) + x_2 (1) + x_3 (-1)\n   \\end{align*}\n   $$\n\n4. **For $z_3$ ( $k = 3$ ):**\n\n   $$\n   \\begin{align*}\n   z_3 &= x_0 \\omega^{0 \\cdot 3} + x_1 \\omega^{1 \\cdot 3} + x_2 \\omega^{2 \\cdot 3} + x_3 \\omega^{3 \\cdot 3} \\\\\n       &= x_0 (1) + x_1 (i) + x_2 (-1) + x_3 (-i)\n   \\end{align*}\n   $$\n\n### **Separate Even and Odd Terms**\n\nGroup the terms into **even-indexed** ($x_0, x_2$) and **odd-indexed** ($x_1, x_3$) contributions:\n\n1. **For $z_0$:**\n\n   $$\n   z_0 = (x_0 + x_2) + (x_1 + x_3)\n   $$\n\n2. **For $z_1$:**\n\n   $$\n   z_1 = \\left( x_0 + x_2 (-1) \\right) + \\left( x_1 (-i) + x_3 (i) \\right)\n   $$\n\n3. **For $z_2$:**\n\n   $$\n   z_2 = (x_0 + x_2) + (x_1 (-1) + x_3 (-1))\n   $$\n\n4. **For $z_3$:**\n\n   $$\n   z_3 = \\left( x_0 + x_2 (-1) \\right) + \\left( x_1 (i) + x_3 (-i) \\right)\n   $$\n\n### **Factor Out Common Terms**\n\nFor the **odd terms**, notice that:\n\n- In $z_1$ and $z_3$, the odd-indexed terms involve $\\omega^k$ multiplied by $x_1$ and $x_3$.\n- We can factor out $\\omega^k$ from these terms.\n\nLet's define:\n\n- $u_k = x_0 + x_2 (-1)^k$\n- $v_k = x_1 + x_3 (-1)^k$\n\n**Compute $(-1)^k$:**\n\n- $(-1)^0 = 1$\n- $(-1)^1 = -1$\n- $(-1)^2 = 1$\n- $(-1)^3 = -1$\n\n**Compute $u_k$:**\n\n- $u_0 = x_0 + x_2 (1) = x_0 + x_2$\n- $u_1 = x_0 + x_2 (-1) = x_0 - x_2$\n- $u_2 = x_0 + x_2 (1) = x_0 + x_2$\n- $u_3 = x_0 + x_2 (-1) = x_0 - x_2$\n\n**Compute $v_k$:**\n\n- $v_0 = x_1 + x_3 (1) = x_1 + x_3$\n- $v_1 = x_1 + x_3 (-1) = x_1 - x_3$\n- $v_2 = x_1 + x_3 (1) = x_1 + x_3$\n- $v_3 = x_1 + x_3 (-1) = x_1 - x_3$\n\nNow, the DFT outputs can be expressed as:\n\n- **For $k = 0$:**\n\n  $$\n  z_0 = u_0 + v_0\n  $$\n\n- **For $k = 1$:**\n\n  $$\n  z_1 = u_1 + \\omega^{k} v_1 = u_1 + (-i) v_1\n  $$\n\n- **For $k = 2$:**\n\n  $$\n  z_2 = u_2 - v_2 = u_2 - v_2\n  $$\n\n- **For $k = 3$:**\n\n  $$\n  z_3 = u_3 + \\omega^{k} v_3 = u_3 + i v_3\n  $$\n\n### **Recognize Smaller DFTs**\n\nWe can now see that we've broken down the original DFT into smaller DFTs of size 2:\n\n#### **Even-Indexed DFT ($U_k$)**\n\nCompute $U_k$ using the even-indexed elements $x_0$ and $x_2$:\n\n$$\n\\begin{bmatrix}\nu_0 \\\\\nu_1\n\\end{bmatrix}\n=\n\\begin{bmatrix}\nx_0 + x_2 \\\\\nx_0 - x_2\n\\end{bmatrix}\n$$\n\n#### **Odd-Indexed DFT ($V_k$)**\n\nCompute $V_k$ using the odd-indexed elements $x_1$ and $x_3$:\n\n$$\n\\begin{bmatrix}\nv_0 \\\\\nv_1\n\\end{bmatrix}\n=\n\\begin{bmatrix}\nx_1 + x_3 \\\\\nx_1 - x_3\n\\end{bmatrix}\n$$\n\n### **Combine the Results with Twiddle Factors**\n\nNow, combine $U_k$ and $V_k$ using the twiddle factors $\\omega^{k}$:\n\n1. **For $k = 0$:**\n\n   $$\n   \\begin{align*}\n   z_0 &= u_0 + \\omega^{0} v_0 = u_0 + v_0 \\\\\n   z_2 &= u_0 - \\omega^{0} v_0 = u_0 - v_0\n   \\end{align*}\n   $$\n\n   Since $\\omega^{0} = 1$.\n\n2. **For $k = 1$:**\n\n   $$\n   \\begin{align*}\n   z_1 &= u_1 + \\omega^{1} v_1 = u_1 + (-i) v_1 \\\\\n   z_3 &= u_1 - \\omega^{1} v_1 = u_1 - (-i) v_1 = u_1 + i v_1\n   \\end{align*}\n   $$\n\n   Since $\\omega^{1} = -i$.\n\n### **Summary of Steps**\n\n1. **Compute $u_0$ and $u_1$:**\n\n   - $u_0 = x_0 + x_2$\n   - $u_1 = x_0 - x_2$\n\n2. **Compute $v_0$ and $v_1$:**\n\n   - $v_0 = x_1 + x_3$\n   - $v_1 = x_1 - x_3$\n\n3. **Compute $z_k$:**\n\n   - $z_0 = u_0 + v_0$\n   - $z_1 = u_1 + (-i) v_1$\n   - $z_2 = u_0 - v_0$\n   - $z_3 = u_1 + i v_1$\n\n### **Final FFT Algorithm for $n = 4$**\n\nBy following these steps, we've efficiently computed the DFT using the FFT algorithm:\n\n- **Step 1:** Divide the input sequence into even and odd indices.\n- **Step 2:** Compute the smaller DFTs ($U_k$ and $V_k$) of size 2.\n- **Step 3:** Combine the results using the twiddle factors $\\omega^{k}$.\n\n## **FFT Flow Diagram**\n\nThe following diagram illustrates how the FFT splits a DFT into smaller sub-DFTs and combines the results:\n\n<img src=\"./fft-flow.png\" alt=\"FFT Diagram\" width=\"500px\">\n\n### **Explanation of the Diagram**\n\n1. **Input Splitting**:\n\n   - The input sequence $x[n]$ of length $N$ is split into two sequences:\n     - The **even-indexed terms**: $x[0], x[2], \\dots, x[N-2]$.\n     - The **odd-indexed terms**: $x[1], x[3], \\dots, x[N-1]$.\n\n2. **Recursive Computation**:\n\n   - Each sequence is passed through an $N/2$-point DFT.\n   - The top box computes the DFT of the even terms, yielding $E[k]$.\n   - The bottom box computes the DFT of the odd terms, yielding $O[k]$.\n\n3. **Combining the Results**:\n\n   - The outputs of the two $N/2$-point DFTs are combined using the twiddle factors $W_N^k$ to compute the final $N$-point DFT:\n     - $X[k] = E[k] + W_N^k O[k]$, for $k = 0, 1, \\dots, N/2-1$.\n     - $X[k + N/2] = E[k] - W_N^k O[k]$, for $k = 0, 1, \\dots, N/2-1$.\n\n4. **Butterfly Connections**:\n   - The crossing lines (labeled with $W_N^k$) represent the **butterfly structure**, which combines the even and odd terms.\n\nThis recursive breakdown is what enables the FFT to compute the DFT efficiently.\n\n",
    "supporting": [
      "fast-fourier-transform_files"
    ],
    "filters": [],
    "includes": {}
  }
}