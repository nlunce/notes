{
  "hash": "61f7cf901382ab95d55810ca8f50b66c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Understanding the Discrete Fourier Transform (DFT)'\nauthor: 'Nathan Lunceford'\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    toc: true\n    toc-depth: 3\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    embed-resources: true\n    code-fold: true\n    code-summary: 'Show the code'\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n      source: false\n      toggle: true\n      caption: See code\nengine: jupyter\npreview:\n  port: 3000\n  browser: true\n  watch-inputs: true\n  navigate: true\n---\n\n\n## **What is the Discrete Fourier Transform (DFT)?**\n\nImagine you’re listening to music. You hear a melody, but the melody is made up of individual notes (frequencies). The **Discrete Fourier Transform (DFT)** works similarly—it takes a \"melody\" of data in the time domain (a sequence of numbers) and breaks it into its \"notes\" (frequency components). This makes it easier to analyze patterns in signals like sound, images, or other data.\n\nThe DFT transforms a sequence of $n$-dimensional samples $x$ into a sequence $y$ that reveals how much of each frequency is present in the original data.\n\n## **Mathematical Definition**\n\nGiven an input vector $x = [x_0, x_1, \\dots, x_{n-1}]^T$, the DFT produces a vector $y = [y_0, y_1, \\dots, y_{n-1}]^T$, where:\n\n$$\ny_k = \\frac{1}{\\sqrt{n}} \\sum_{j=0}^{n-1} x_j \\omega^{jk}, \\quad \\omega = e^{-i \\frac{2\\pi}{n}}, \\quad k = 0, 1, \\dots, n-1\n$$\n\n## **What is $\\omega$ and Why Does $\\omega^1 = -i$?**\n\n### **Step 1: Define $\\omega$**\n\nThe root of unity $\\omega$ is defined as:\n\n$$\n\\omega = e^{-i \\frac{2\\pi}{n}}\n$$\n\nFor $n = 4$, this becomes:\n\n$$\n\\omega = e^{-i \\frac{2\\pi}{4}} = e^{-i \\frac{\\pi}{2}}\n$$\n\n### **Step 2: Expand $e^{-i \\frac{\\pi}{2}}$ Using Euler’s Formula**\n\nEuler's formula states:\n\n$$\ne^{i\\theta} = \\cos(\\theta) + i \\sin(\\theta)\n$$\n\nUsing this for $\\omega = e^{-i \\frac{\\pi}{2}}$, we get:\n\n$$\ne^{-i \\frac{\\pi}{2}} = \\cos\\left(-\\frac{\\pi}{2}\\right) + i \\sin\\left(-\\frac{\\pi}{2}\\right)\n$$\n\nFrom the unit circle:\n\n- $\\cos\\left(-\\frac{\\pi}{2}\\right) = 0$,\n- $\\sin\\left(-\\frac{\\pi}{2}\\right) = -1$.\n\nSubstitute these values:\n\n$$\ne^{-i \\frac{\\pi}{2}} = 0 - i = -i\n$$\n\nThus:\n\n$$\n\\omega^1 = -i\n$$\n\n### **Step 3: Verify Powers of $\\omega$**\n\nThe powers of $\\omega$ for $n = 4$ are as follows:\n\n1. $\\omega^0 = e^{-i \\cdot 0} = 1$\n2. $\\omega^1 = e^{-i \\frac{\\pi}{2}} = -i$\n3. $\\omega^2 = e^{-i \\pi} = -1$\n4. $\\omega^3 = e^{-i \\frac{3\\pi}{2}} = i$\n5. $\\omega^4 = e^{-i 2\\pi} = 1$ (cyclic repetition)\n\nThese powers correspond to four equally spaced points on the unit circle in the complex plane.\n\n## **Building the Fourier Matrix**\n\nThe Fourier matrix $F_n$ is defined as:\n\n$$\nF_n(k, j) = \\frac{1}{\\sqrt{n}} \\omega^{kj}, \\quad k, j = 0, 1, \\dots, n-1\n$$\n\nFor $n = 4$:\n\n1. Compute $\\frac{1}{\\sqrt{4}} = \\frac{1}{2}$.\n2. Use the powers of $\\omega$ to fill the matrix:\n\n$$\nF_4 = \\frac{1}{2}\n\\begin{bmatrix}\n1 & 1 & 1 & 1 \\\\\n1 & -i & -1 & i \\\\\n1 & -1 & 1 & -1 \\\\\n1 & i & -1 & -i\n\\end{bmatrix}\n$$\n\nEach row corresponds to a frequency $k$, and each column corresponds to a time sample $j$.\n\n## **Conclusion**\n\nThe key to understanding the Fourier matrix and DFT lies in the properties of $\\omega$, the primitive root of unity. The matrix formulation provides a systematic way to compute the DFT, while the powers of $\\omega$ determine the contributions of different frequencies in the signal. By breaking the time-domain signal into its frequency components, the DFT reveals hidden patterns and structures in the data.\n\n```\n\n```\n\n",
    "supporting": [
      "discrete-fourier-transform_files"
    ],
    "filters": [],
    "includes": {}
  }
}