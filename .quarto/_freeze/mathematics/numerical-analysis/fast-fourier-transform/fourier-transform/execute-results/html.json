{
  "hash": "c431f8c1dd0801561860fa16019a5c4b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Fourier Transform'\nauthor: 'Nathan Lunceford'\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    toc: true\n    toc-depth: 3\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    embed-resources: true\n    code-fold: true\n    code-summary: 'Show Code'\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n      source: false\n      toggle: true\n      caption: See code\nengine: jupyter\npreview:\n  port: 3000\n  browser: true\n  watch-inputs: true\n  navigate: true\n---\n\n\n## **Overview**\n\nThe Fourier Transform is a mathematical operation that transforms a function of time $g(t)$ into a function of frequency $f$. It provides a powerful tool for analyzing the frequency components of signals and is widely used in physics, engineering, and signal processing.\n\n## **Definition**\n\nThe Fourier Transform of a function $g(t)$ is given by:\n\n$$\n\\hat{g}(f) = \\int_{-\\infty}^{+\\infty} g(t) e^{-2\\pi i f t} \\, dt\n$$\n\nHere:\n\n- $g(t)$: The function in the time domain.\n- $f$: The frequency variable (in Hz).\n- $\\hat{g}(f)$: The Fourier Transform, representing the frequency domain representation of $g(t)$.\n- $e^{-2\\pi i f t}$: A complex exponential that encodes frequency components.\n\nThe **Inverse Fourier Transform** allows reconstruction of $g(t)$ from its Fourier Transform $\\hat{g}(f)$:\n\n$$\ng(t) = \\int_{-\\infty}^{+\\infty} \\hat{g}(f) e^{2\\pi i f t} \\, df\n$$\n\n## **Properties**\n\n1. **Linearity**:\n\n   $$\n   \\mathcal{F}(a g_1 + b g_2)(f) = a \\hat{g}_1(f) + b \\hat{g}_2(f)\n   $$\n\n2. **Time Shift**:\n   If $g(t) \\to \\hat{g}(f)$, then $g(t - t_0) \\to \\hat{g}(f)e^{-2\\pi i f t_0}$.\n\n3. **Frequency Shift**:\n   If $g(t) \\to \\hat{g}(f)$, then $e^{2\\pi i f_0 t} g(t) \\to \\hat{g}(f - f_0)$.\n\n4. **Scaling**:\n   If $g(at) \\to \\frac{1}{|a|} \\hat{g}\\left(\\frac{f}{a}\\right)$.\n\n5. **Parseval's Theorem**:\n   The total energy of the signal in the time and frequency domains is the same:\n\n   $$\n   \\int_{-\\infty}^{+\\infty} |g(t)|^2 \\, dt = \\int_{-\\infty}^{+\\infty} |\\hat{g}(f)|^2 \\, df\n   $$\n\n6. **Convolution**:\n   Convolution in the time domain corresponds to multiplication in the frequency domain:\n\n   $$\n   \\mathcal{F}(g_1 \\ast g_2)(f) = \\hat{g}_1(f) \\cdot \\hat{g}_2(f)\n   $$\n\n   where $(g*1 \\ast g_2)(t) = \\int*{-\\infty}^{+\\infty} g_1(\\tau) g_2(t - \\tau) \\, d\\tau$.\n\n## **Applications**\n\n1. **Signal Processing**:\n\n   - Frequency analysis, filtering, and noise reduction.\n\n2. **Physics**:\n\n   - Analyzing waveforms, optics, and quantum mechanics.\n\n3. **Engineering**:\n\n   - Communication systems and control systems.\n\n4. **Image Processing**:\n   - Compression, edge detection, and restoration.\n\n### **Example: Fourier Transform of a Sine Wave**\n\nConsider the signal $g(t) = \\sin(2\\pi f_0 t)$. Using Euler's formula, $\\sin(2\\pi f_0 t) = \\frac{e^{2\\pi i f_0 t} - e^{-2\\pi i f_0 t}}{2i}$, we find:\n\n$$\n\\hat{g}(f) = \\frac{1}{2i} [\\delta(f - f_0) - \\delta(f + f_0)]\n$$\n\nThe Fourier Transform shows that the sine wave consists of two frequency components at $\\pm f_0$.\n\n## [**Discrete Fourier Transform (DFT)**](./discrete-fourier-transform.html)\n\nFor digital signals, the Fourier Transform is approximated using the Discrete Fourier Transform (DFT). For a sequence of $N$ samples $\\{g_n\\}$:\n\n$$\n\\hat{g}_k = \\sum_{n=0}^{N-1} g_n e^{-2\\pi i k n / N}, \\quad k = 0, 1, \\dots, N-1\n$$\n\nThe **Inverse DFT (IDFT)** is:\n\n$$\ng_n = \\frac{1}{N} \\sum_{k=0}^{N-1} \\hat{g}_k e^{2\\pi i k n / N}\n$$\n\nThe Fast Fourier Transform (FFT) is an efficient algorithm to compute the DFT.\n\n## **Conclusion**\n\nThe Fourier Transform bridges the time and frequency domains, enabling analysis and manipulation of signals. Its versatility and foundational properties make it an essential tool in science and engineering.\n\n",
    "supporting": [
      "fourier-transform_files"
    ],
    "filters": [],
    "includes": {}
  }
}