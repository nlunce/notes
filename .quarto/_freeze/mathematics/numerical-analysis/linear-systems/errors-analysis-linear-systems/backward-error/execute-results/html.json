{
  "hash": "8bf9421337d33a250e1b79fb37d7fe86",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Backward Error in Linear Systems'\nauthor: 'Nathan Lunceford'\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    toc: true\n    toc-depth: 3\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    embed-resources: true\n    code-fold: true\n    code-summary: 'Show the code'\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n      source: false\n      toggle: true\n      caption: See code\nengine: jupyter\npreview:\n  port: 3000\n  browser: true\n  watch-inputs: true\n  navigate: true\n---\n\n\n## **Overview**\n\nThe **backward error** is a crucial concept in numerical linear algebra, measuring the smallest perturbation in the right-hand side $\\mathbf{b}$ that would make the approximate solution $\\mathbf{x_a}$ satisfy the linear system $A\\mathbf{x} = \\mathbf{b}$ exactly. In other words, it quantifies how much we need to adjust $\\mathbf{b}$ so that $\\mathbf{x_a}$ becomes an exact solution to a slightly modified system. This concept helps us understand the sensitivity of solutions and the reliability of numerical methods.\n\nThe backward error is defined as:\n\n$$\n\\text{BE} = \\|\\mathbf{r}\\|_\\infty = \\|\\mathbf{b} - A\\mathbf{x_a}\\|_\\infty\n$$\n\nwhere:\n\n- $\\mathbf{r}$: The **residual vector**, $\\mathbf{r} = \\mathbf{b} - A\\mathbf{x_a}$,\n- $\\|\\cdot\\|_\\infty$: The [**infinity norm**](../norms/infinity-vector-norm.html), measuring the maximum absolute entry of the residual.\n\n## **What Backward Error Represents**\n\n1. **Residual Perspective**:\n\n   - The backward error reflects the size of the residual in the infinity norm. A smaller residual indicates that $\\mathbf{x_a}$ nearly satisfies the system $A\\mathbf{x} = \\mathbf{b}$.\n\n2. **Adjustment to $\\mathbf{b}$**:\n\n   - It provides an estimate of the minimal adjustment needed in $\\mathbf{b}$ to make $\\mathbf{x_a}$ an exact solution. Essentially, it tells us how much we need to perturb $\\mathbf{b}$ so that $A\\mathbf{x_a} = \\mathbf{b}'$ holds exactly for some $\\mathbf{b}'$ close to $\\mathbf{b}$.\n\n3. **Exact Solution**:\n\n   - If $\\mathbf{x_a}$ is the exact solution, then the residual $\\mathbf{r} = \\mathbf{0}$, and hence:\n\n     $$\n     \\text{BE} = 0\n     $$\n\n## **Why Backward Error Matters**\n\n- **Assessing Solution Quality**:\n\n  - The backward error helps evaluate how good the approximate solution $\\mathbf{x_a}$ is by measuring its exactness for a nearby system.\n\n- **Numerical Stability**:\n\n  - Algorithms with small backward errors are considered numerically stable because they produce solutions that are accurate for slightly perturbed inputs.\n\n- **Error Analysis**:\n\n  - Understanding the backward error allows us to relate it to the forward error (the difference between $\\mathbf{x_a}$ and the true solution $\\mathbf{x}$) and to analyze the overall accuracy of numerical methods.\n\n## **Example**\n\nConsider the system:\n\n$$\nA = \\begin{bmatrix} 1 & 1 \\\\ 3 & -4 \\end{bmatrix}, \\quad\n\\mathbf{b} = \\begin{bmatrix} 3 \\\\ 2 \\end{bmatrix}, \\quad\n\\mathbf{x_a} = \\begin{bmatrix} 1 \\\\ 1 \\end{bmatrix}\n$$\n\n### **Step 1: Compute $A\\mathbf{x_a}$**\n\nMultiply $A$ by $\\mathbf{x_a}$:\n\n$$\nA\\mathbf{x_a} = \\begin{bmatrix} 1 \\times 1 + 1 \\times 1 \\\\ 3 \\times 1 + (-4) \\times 1 \\end{bmatrix} = \\begin{bmatrix} 2 \\\\ -1 \\end{bmatrix}\n$$\n\n### **Step 2: Compute the [Residual](./residual-linear-systems.html) $\\mathbf{r}$**\n\nSubtract $A\\mathbf{x_a}$ from $\\mathbf{b}$:\n\n$$\n\\mathbf{r} = \\mathbf{b} - A\\mathbf{x_a} = \\begin{bmatrix} 3 - 2 \\\\ 2 - (-1) \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 3 \\end{bmatrix}\n$$\n\n### **Step 3: Compute the Backward Error**\n\nThe backward error is the infinity norm of the residual:\n\n$$\n\\text{BE} = \\|\\mathbf{r}\\|_\\infty = \\max(|1|, |3|) = 3\n$$\n\nThis means the largest adjustment needed in $\\mathbf{b}$ is $3$, making $\\mathbf{x_a}$ an exact solution for the perturbed system $A\\mathbf{x_a} = \\mathbf{b}'$, where $\\mathbf{b}' = A\\mathbf{x_a}$.\n\n### **Step 4: Interpretation**\n\n- **Residual Components**:\n\n  - The residual vector $\\mathbf{r}$ has components:\n\n    $$\n    \\mathbf{r} = \\begin{bmatrix} r_1 \\\\ r_2 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 3 \\end{bmatrix}\n    $$\n\n  - The infinity norm is the maximum absolute value among these components:\n\n    $$\n    \\|\\mathbf{r}\\|_\\infty = \\max(|r_1|, |r_2|) = \\max(1, 3) = 3\n    $$\n\n  - This highlights that the backward error is dominated by the change in the $y$-component ($r_2 = 3$).\n\n## **Visualization of Backward Error**\n\nThe graph below illustrates the backward error:\n\n- **Blue Vector** ($\\mathbf{b}$): The target vector in the system.\n- **Green Vector** ($A\\mathbf{x_a}$): The vector computed by substituting the approximate solution $\\mathbf{x_a}$.\n- **Red Vector** ($\\mathbf{r} = \\mathbf{b} - A\\mathbf{x_a}$): The residual vector, representing the discrepancy.\n- **Residual Components**: Projections of $\\mathbf{r}$ onto the $x$ and $y$ axes, showing $r_1$ and $r_2$.\n\n::: {#cell-backward-error .cell execution_count=1}\n``` {.python .cell-code code-summary=\"Show Code\"}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nA = np.array([[1, 1], [3, -4]])\nb = np.array([3, 2])\nx_a = np.array([1, 1])\n\nAx_a = A @ x_a\nr = b - Ax_a\n\nplt.figure(figsize=(10, 8))\norigin = np.zeros(2)\n\nplt.quiver(*origin, *b, color='blue', angles='xy', scale_units='xy', scale=1, label=r'$\\mathbf{b}$')\nplt.quiver(*origin, *Ax_a, color='green', angles='xy', scale_units='xy', scale=1, label=r'$A\\mathbf{x}_a$')\nplt.quiver(*Ax_a, *r, color='red', angles='xy', scale_units='xy', scale=1, label=r'$\\mathbf{r} = \\mathbf{b} - A\\mathbf{x}_a$')\n\n\nplt.annotate(r'$A\\mathbf{x}_a$', (Ax_a[0], Ax_a[1]), textcoords=\"offset points\", xytext=(-60,10), ha='center', color='green', fontsize=12)\nplt.annotate(r'$\\mathbf{b}$', (b[0], b[1]), textcoords=\"offset points\", xytext=(-20,15), ha='center', color='blue', fontsize=12)\nplt.annotate(r'$\\mathbf{r}$', (Ax_a[0] + r[0]/2, Ax_a[1] + r[1]/2), textcoords=\"offset points\", xytext=(10,0), ha='center', color='red', fontsize=12)\n\nplt.plot([Ax_a[0], b[0]], [Ax_a[1], b[1]], 'r--', linewidth=1)\n\nplt.quiver(*Ax_a, r[0], 0, color='orange', angles='xy', scale_units='xy', scale=1, label=r'$\\mathbf{r_1}$')\nplt.quiver(Ax_a[0] + r[0], Ax_a[1], 0, r[1], color='purple', angles='xy', scale_units='xy', scale=1, label=r'$\\mathbf{r_2}$')\n\nplt.annotate(r'$\\mathbf{r_1}$', (Ax_a[0] + r[0]/2, Ax_a[1] - 0.2), textcoords=\"offset points\", xytext=(0,-10), ha='center', color='orange', fontsize=12)\nplt.annotate(r'$\\mathbf{r_2}$', (Ax_a[0] + r[0] + 0.1, Ax_a[1] + r[1]/2), textcoords=\"offset points\", xytext=(10,0), ha='center', color='purple', fontsize=12)\n\nplt.text(Ax_a[0] + r[0] + 0.1, Ax_a[1] + r[1] -0.3, r'$\\max(|\\mathbf{r_1}|, |\\mathbf{r_2}|) = |\\mathbf{r_2}| = 3$', color='purple', fontsize=10)\n\nplt.xlim(-1, 5)\nplt.ylim(-2, 5)\nplt.axhline(0, color='black', linewidth=0.5)\nplt.axvline(0, color='black', linewidth=0.5)\nplt.grid(color='gray', linestyle='--', linewidth=0.5)\nplt.legend(loc='upper left', fontsize=12)\nplt.title('Visualization of Backward Error with Residual Components', fontsize=16)\nplt.xlabel('x-axis', fontsize=14)\nplt.ylabel('y-axis', fontsize=14)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](backward-error_files/figure-html/backward-error-output-1.png){#backward-error width=642 height=681}\n:::\n:::\n\n\n",
    "supporting": [
      "backward-error_files"
    ],
    "filters": [],
    "includes": {}
  }
}