{
  "hash": "dfa480e7f1042465d089140156df6e8c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'The Gauss-Seidel Method for Solving Linear Systems'\nauthor: 'Nathan Lunceford'\nformat:\n  html:\n    self-contained: true\n    page-layout: full\n    toc: true\n    toc-depth: 3\n    toc-location: right\n    number-sections: false\n    html-math-method: katex\n    embed-resources: true\n    code-fold: true\n    code-summary: 'Show Code'\n    code-overflow: wrap\n    code-copy: hover\n    code-tools:\n      source: false\n      toggle: true\n      caption: See code\nengine: jupyter\npreview:\n  port: 3000\n  browser: true\n  watch-inputs: true\n  navigate: true\n---\n\n\n## **Overview**\n\nThe **Gauss-Seidel Method** is an iterative technique for solving [**systems of linear equations**](../../w06/linear-systems.html). It improves upon the [**Jacobi Method**](./jacobi-method.html) by using updated values of variables immediately within each iteration, often leading to faster convergence.\n\n## **The Gauss-Seidel Method**\n\nConsider the system:\n\n$$\nA\\mathbf{x} = \\mathbf{b}\n$$\n\nwhere $A$ is decomposed into:\n\n- $D$: The diagonal components of $A$,\n- $L$: The strictly lower triangular components of $A$,\n- $U$: The strictly upper triangular components of $A$.\n\nThus:\n\n$$\nA = D + L + U\n$$\n\nRewriting the system:\n\n$$\n(D + L + U)\\mathbf{x} = \\mathbf{b}\n$$\n\nSolving for $\\mathbf{x}$, the iterative formula for the Gauss-Seidel Method is:\n\n$$\n\\mathbf{x}_{k+1} = D^{-1} \\left( \\mathbf{b} - U\\mathbf{x}_{k} - L\\mathbf{x}_{k+1} \\right), \\quad \\text{for } k = 0, 1, 2, \\dots\n$$\n\nHere:\n\n- $\\mathbf{x}_0$: Initial guess vector.\n- $k$: Iteration number.\n\n## **Example**\n\n### **System of Equations**\n\nConsider the system:\n\n$$\n4u + v + w = 7, \\quad u + 3v + w = 8, \\quad u + v + 5w = 6\n$$\n\n### **Step 1: Rearrange Equations**\n\nRewriting each equation to isolate the variables:\n\n$$\nu = \\frac{7 - v - w}{4}, \\quad v = \\frac{8 - u - w}{3}, \\quad w = \\frac{6 - u - v}{5}\n$$\n\n### **Step 2: Iterative Updates**\n\nStart with an initial guess, $\\mathbf{x}_0 = \\begin{bmatrix} u_0 \\\\ v_0 \\\\ w_0 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\end{bmatrix}$. The iterations proceed as follows:\n\n1. **Iteration 1 ($k = 1$):**\n\n   $$\n   u^{(1)} = \\frac{7 - 0 - 0}{4} = 1.75, \\quad\n   v^{(1)} = \\frac{8 - 1.75 - 0}{3} = 2.083, \\quad\n   w^{(1)} = \\frac{6 - 1.75 - 2.083}{5} = 0.833\n   $$\n\n   $$\n   \\mathbf{x}^{(1)} = \\begin{bmatrix} 1.75 \\\\ 2.083 \\\\ 0.833 \\end{bmatrix}\n   $$\n\n2. **Iteration 2 ($k = 2$):**\n\n   Using updated values:\n\n   $$\n   u^{(2)} = \\frac{7 - 2.083 - 0.833}{4} = 1.521\n   $$\n\n   $$\n   v^{(2)} = \\frac{8 - 1.521 - 0.833}{3} = 1.882\n   $$\n\n   $$\n   w^{(2)} = \\frac{6 - 1.521 - 1.882}{5} = 0.919\n   $$\n\n   $$\n   \\mathbf{x}^{(2)} = \\begin{bmatrix} 1.521 \\\\ 1.882 \\\\ 0.919 \\end{bmatrix}\n   $$\n\n3. **Iteration 3 ($k = 3$):**\n\n   Repeating the process:\n\n   $$\n   u^{(3)} = 1.550, \\quad v^{(3)} = 1.866, \\quad w^{(3)} = 0.916\n   $$\n\n   $$\n   \\mathbf{x}^{(3)} = \\begin{bmatrix} 1.550 \\\\ 1.866 \\\\ 0.916 \\end{bmatrix}\n   $$\n\n## **Convergence**\n\nThe iterations converge to:\n\n$$\n\\mathbf{x} = \\begin{bmatrix} 1.6 \\\\ 1.8 \\\\ 0.9 \\end{bmatrix}\n$$\n\n## **Convergence Conditions**\n\nThe Gauss-Seidel Method converges if $A$ is **strictly diagonally dominant**, meaning:\n\n$$\n|a_{ii}| > \\sum_{j \\neq i} |a_{ij}|\n$$\n\nfor all rows $i$, or if $A$ is **symmetric positive definite**.\n\n## **Advantages**\n\n- Faster convergence than the Jacobi Method due to the use of updated values.\n- Efficient for solving large systems with appropriate properties.\n\n## **Limitations**\n\n- May fail to converge if $A$ is not strictly diagonally dominant or symmetric positive definite.\n- Sequential updates limit parallel computation.\n\n## **Summary**\n\nThe Gauss-Seidel Method is a powerful iterative technique for solving linear systems, particularly when $A$ is strictly diagonally dominant or symmetric positive definite. Its reliance on updated values accelerates convergence but also imposes matrix property requirements for guaranteed success.\n\n",
    "supporting": [
      "gauss-seidel-method_files"
    ],
    "filters": [],
    "includes": {}
  }
}